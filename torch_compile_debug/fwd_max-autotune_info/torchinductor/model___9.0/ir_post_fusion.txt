buf0: SchedulerNode(TritonTemplateBuffer)
buf0.writes = [MemoryDep('buf0', c0, {c0: 6291456})]
buf0.unmet_dependencies = []
buf0.met_dependencies = [StarDep(name='arg0_1'), StarDep(name='arg1_1')]
buf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf2'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf3'), can_inplace=False, is_weak=False)]
buf0.group.device = cuda:0
buf0.group.iteration = (6291456, 1)
buf0.sizes = ([4096, 1536], ())


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = [MemoryDep('buf1', c0, {c0: 2097152})]
buf1.unmet_dependencies = [MemoryDep('buf0', 1536*c0 + c1, {c0: 4096, c1: 512})]
buf1.met_dependencies = [MemoryDep('arg2_1', c1, {c0: 4096, c1: 512})]
buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf4'), can_inplace=False, is_weak=False)]
buf1.group.device = cuda:0
buf1.group.iteration = (2097152, 1)
buf1.sizes = ([4096, 512], [])
class buf1_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf1', get_index_2, add, None)
        return store


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = [MemoryDep('buf2', c0, {c0: 2097152})]
buf2.unmet_dependencies = [MemoryDep('buf0', 1536*c0 + c1 + 512, {c0: 4096, c1: 512})]
buf2.met_dependencies = [MemoryDep('arg2_1', c1 + 512, {c0: 4096, c1: 512})]
buf2.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf4'), can_inplace=False, is_weak=False)]
buf2.group.device = cuda:0
buf2.group.iteration = (2097152, 1)
buf2.sizes = ([4096, 512], [])
class buf2_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 512
    index1 = z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf2', get_index_2, add, None)
        return store


buf3: SchedulerNode(ComputedBuffer)
buf3.writes = [MemoryDep('buf3', c0, {c0: 2097152})]
buf3.unmet_dependencies = [MemoryDep('buf0', 1536*c0 + c1 + 1024, {c0: 4096, c1: 512})]
buf3.met_dependencies = [MemoryDep('arg2_1', c1 + 1024, {c0: 4096, c1: 512})]
buf3.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf4'), can_inplace=False, is_weak=False)]
buf3.group.device = cuda:0
buf3.group.iteration = (2097152, 1)
buf3.sizes = ([4096, 512], [])
class buf3_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 1024
    index1 = z1 + 1024
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf3', get_index_2, add, None)
        return store


buf4: ExternKernelSchedulerNode(FallbackKernel)
buf4.writes = [StarDep(name='buf4')]
buf4.unmet_dependencies = [StarDep(name='buf1'), StarDep(name='buf2'), StarDep(name='buf3')]
buf4.met_dependencies = []
buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf5'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf6'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf7'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf8'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf9'), can_inplace=False, is_weak=False)]
buf4.node.kernel = None


buf5: ExternKernelSchedulerNode(MultiOutput)
buf5.writes = [StarDep(name='buf5')]
buf5.unmet_dependencies = [StarDep(name='buf4')]
buf5.met_dependencies = []
buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf10'), can_inplace=False, is_weak=False)]
buf5.node.kernel = None


buf10: ExternKernelSchedulerNode(ExternKernelOut)
buf10.writes = [StarDep(name='buf10')]
buf10.unmet_dependencies = [StarDep(name='buf5')]
buf10.met_dependencies = [StarDep(name='arg3_1')]
buf10.users = [NodeUser(node=SchedulerNode(name='buf11'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf12'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf13'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf14'), can_inplace=True, is_weak=False)]
buf10.node.kernel = extern_kernels.mm


buf11_buf12_buf14: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf11_buf12_buf14.writes = 
    [   MemoryDep('buf11', c0, {c0: 4096}),
        MemoryDep('buf12', c0, {c0: 4096}),
        MemoryDep('buf14', c0, {c0: 2097152})]
buf11_buf12_buf14.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 2097152})]
buf11_buf12_buf14.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2097152}),
        MemoryDep('arg4_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg5_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg6_1', c1, {c0: 4096, c1: 512})]
buf11_buf12_buf14.users = []
    buf11_buf12_buf14.snodes[0] =
    buf11: SchedulerNode(ComputedBuffer)
    buf11.writes = [MemoryDep('buf11', c0, {c0: 4096})]
    buf11.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 2097152})]
    buf11.met_dependencies = 
        [   MemoryDep('arg0_1', c0, {c0: 2097152}),
            MemoryDep('arg4_1', c1, {c0: 4096, c1: 512})]
    buf11.users = [NodeUser(node=SchedulerNode(name='buf14'), can_inplace=False, is_weak=False)]
    buf11.group.device = cuda:0
    buf11.group.iteration = (4096, 512)
    buf11.sizes = ([4096], [512])
    class buf11_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf10', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg4_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('arg0_1', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf11', get_index_3, getitem)
            return store_reduction
    buf11_buf12_buf14.snodes[1] =
    buf12: SchedulerNode(ComputedBuffer)
    buf12.writes = [MemoryDep('buf12', c0, {c0: 4096})]
    buf12.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 2097152})]
    buf12.met_dependencies = 
        [   MemoryDep('arg0_1', c0, {c0: 2097152}),
            MemoryDep('arg4_1', c1, {c0: 4096, c1: 512})]
    buf12.users = [NodeUser(node=SchedulerNode(name='buf14'), can_inplace=False, is_weak=False)]
    buf12.group.device = cuda:0
    buf12.group.iteration = (4096, 512)
    buf12.sizes = ([4096], [512])
    class buf12_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf10', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg4_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('arg0_1', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf12', get_index_3, getitem_1)
            return store_reduction
    buf11_buf12_buf14.snodes[2] =
    buf14: SchedulerNode(ComputedBuffer)
    buf14.writes = [MemoryDep('buf14', c0, {c0: 2097152})]
    buf14.unmet_dependencies = 
        [   MemoryDep('buf10', c0, {c0: 2097152}),
            MemoryDep('buf11', c0, {c0: 4096}),
            MemoryDep('buf12', c0, {c0: 4096})]
    buf14.met_dependencies = 
        [   MemoryDep('arg0_1', c0, {c0: 2097152}),
            MemoryDep('arg4_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg5_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg6_1', c1, {c0: 4096, c1: 512})]
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf15'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf18'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf19'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf20'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf21'), can_inplace=True, is_weak=False)]
    buf14.group.device = cuda:0
    buf14.group.iteration = (2097152, 1)
    buf14.sizes = ([4096, 512], [])
    class buf14_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf10', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg4_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('arg0_1', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf11', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf12', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg5_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg6_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf14', get_index_7, to_dtype_3, None)
            return store


buf15: ExternKernelSchedulerNode(ExternKernelOut)
buf15.writes = [StarDep(name='buf15')]
buf15.unmet_dependencies = [StarDep(name='buf14')]
buf15.met_dependencies = [StarDep(name='arg7_1')]
buf15.users = [NodeUser(node=SchedulerNode(name='buf16'), can_inplace=True, is_weak=False)]
buf15.node.kernel = extern_kernels.mm


buf16: SchedulerNode(ComputedBuffer)
buf16.writes = [MemoryDep('buf16', c0, {c0: 8388608})]
buf16.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 8388608})]
buf16.met_dependencies = [MemoryDep('arg8_1', c1, {c0: 4096, c1: 2048})]
buf16.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf17'), can_inplace=False, is_weak=False)]
buf16.group.device = cuda:0
buf16.group.iteration = (8388608, 1)
buf16.sizes = ([4096, 2048], [])
class buf16_loop_body:
    var_ranges = {z0: 4096, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg8_1', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf15', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg8_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf16', get_index_4, to_dtype_2, None)
        return store


buf17: ExternKernelSchedulerNode(ExternKernelOut)
buf17.writes = [StarDep(name='buf17')]
buf17.unmet_dependencies = [StarDep(name='buf16')]
buf17.met_dependencies = [StarDep(name='arg9_1')]
buf17.users = [NodeUser(node=SchedulerNode(name='buf18'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf19'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf20'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf21'), can_inplace=True, is_weak=False)]
buf17.node.kernel = extern_kernels.mm


buf18_buf19_buf21: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf18_buf19_buf21.writes = 
    [   MemoryDep('buf18', c0, {c0: 4096}),
        MemoryDep('buf19', c0, {c0: 4096}),
        MemoryDep('buf21', c0, {c0: 2097152})]
buf18_buf19_buf21.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 2097152}), MemoryDep('buf17', c0, {c0: 2097152})]
buf18_buf19_buf21.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg11_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg12_1', c1, {c0: 4096, c1: 512})]
buf18_buf19_buf21.users = []
    buf18_buf19_buf21.snodes[0] =
    buf18: SchedulerNode(ComputedBuffer)
    buf18.writes = [MemoryDep('buf18', c0, {c0: 4096})]
    buf18.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 2097152}), MemoryDep('buf17', c0, {c0: 2097152})]
    buf18.met_dependencies = [MemoryDep('arg10_1', c1, {c0: 4096, c1: 512})]
    buf18.users = [NodeUser(node=SchedulerNode(name='buf21'), can_inplace=False, is_weak=False)]
    buf18.group.device = cuda:0
    buf18.group.iteration = (4096, 512)
    buf18.sizes = ([4096], [512])
    class buf18_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf17', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg10_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf14', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf18', get_index_3, getitem)
            return store_reduction
    buf18_buf19_buf21.snodes[1] =
    buf19: SchedulerNode(ComputedBuffer)
    buf19.writes = [MemoryDep('buf19', c0, {c0: 4096})]
    buf19.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 2097152}), MemoryDep('buf17', c0, {c0: 2097152})]
    buf19.met_dependencies = [MemoryDep('arg10_1', c1, {c0: 4096, c1: 512})]
    buf19.users = [NodeUser(node=SchedulerNode(name='buf21'), can_inplace=False, is_weak=False)]
    buf19.group.device = cuda:0
    buf19.group.iteration = (4096, 512)
    buf19.sizes = ([4096], [512])
    class buf19_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf17', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg10_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf14', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf19', get_index_3, getitem_1)
            return store_reduction
    buf18_buf19_buf21.snodes[2] =
    buf21: SchedulerNode(ComputedBuffer)
    buf21.writes = [MemoryDep('buf21', c0, {c0: 2097152})]
    buf21.unmet_dependencies = 
        [   MemoryDep('buf14', c0, {c0: 2097152}),
            MemoryDep('buf17', c0, {c0: 2097152}),
            MemoryDep('buf18', c0, {c0: 4096}),
            MemoryDep('buf19', c0, {c0: 4096})]
    buf21.met_dependencies = 
        [   MemoryDep('arg10_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg11_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg12_1', c1, {c0: 4096, c1: 512})]
    buf21.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf21.group.device = cuda:0
    buf21.group.iteration = (2097152, 1)
    buf21.sizes = ([4096, 512], [])
    class buf21_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf17', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg10_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf14', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf18', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf19', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg11_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg12_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf21', get_index_7, to_dtype_3, None)
            return store


