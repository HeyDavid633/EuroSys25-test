buf0: ExternKernelSchedulerNode(ExternKernelOut)
buf0.writes = [StarDep(name='buf0')]
buf0.unmet_dependencies = []
buf0.met_dependencies = [StarDep(name='arg0_1'), StarDep(name='arg1_1')]
buf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf2'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf3'), can_inplace=False, is_weak=False)]
buf0.node.kernel = extern_kernels.mm


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = [MemoryDep('buf1', c0, {c0: 2097152})]
buf1.unmet_dependencies = [MemoryDep('buf0', 1536*c0 + c1, {c0: 4096, c1: 512})]
buf1.met_dependencies = [MemoryDep('arg2_1', c1, {c0: 4096, c1: 512})]
buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf4'), can_inplace=False, is_weak=False)]
buf1.group.device = cuda:0
buf1.group.iteration = (2097152, 1)
buf1.sizes = ([4096, 512], [])
class buf1_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf1', get_index_2, add, None)
        return store


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = [MemoryDep('buf2', c0, {c0: 2097152})]
buf2.unmet_dependencies = [MemoryDep('buf0', 1536*c0 + c1 + 512, {c0: 4096, c1: 512})]
buf2.met_dependencies = [MemoryDep('arg2_1', c1 + 512, {c0: 4096, c1: 512})]
buf2.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf4'), can_inplace=False, is_weak=False)]
buf2.group.device = cuda:0
buf2.group.iteration = (2097152, 1)
buf2.sizes = ([4096, 512], [])
class buf2_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 512
    index1 = z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf2', get_index_2, add, None)
        return store


buf3: SchedulerNode(ComputedBuffer)
buf3.writes = [MemoryDep('buf3', c0, {c0: 2097152})]
buf3.unmet_dependencies = [MemoryDep('buf0', 1536*c0 + c1 + 1024, {c0: 4096, c1: 512})]
buf3.met_dependencies = [MemoryDep('arg2_1', c1 + 1024, {c0: 4096, c1: 512})]
buf3.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf4'), can_inplace=False, is_weak=False)]
buf3.group.device = cuda:0
buf3.group.iteration = (2097152, 1)
buf3.sizes = ([4096, 512], [])
class buf3_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 1024
    index1 = z1 + 1024
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf3', get_index_2, add, None)
        return store


buf4: ExternKernelSchedulerNode(FallbackKernel)
buf4.writes = [StarDep(name='buf4')]
buf4.unmet_dependencies = [StarDep(name='buf1'), StarDep(name='buf2'), StarDep(name='buf3')]
buf4.met_dependencies = []
buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf5'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf6'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf7'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf8'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf9'), can_inplace=False, is_weak=False)]
buf4.node.kernel = None


buf5: ExternKernelSchedulerNode(MultiOutput)
buf5.writes = [StarDep(name='buf5')]
buf5.unmet_dependencies = [StarDep(name='buf4')]
buf5.met_dependencies = []
buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf10'), can_inplace=False, is_weak=False)]
buf5.node.kernel = None


buf10: ExternKernelSchedulerNode(ExternKernelOut)
buf10.writes = [StarDep(name='buf10')]
buf10.unmet_dependencies = [StarDep(name='buf5')]
buf10.met_dependencies = [StarDep(name='arg3_1')]
buf10.users = [NodeUser(node=SchedulerNode(name='buf11'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf12'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf13'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf14'), can_inplace=True, is_weak=False)]
buf10.node.kernel = extern_kernels.mm


buf11_buf12_buf14: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf11_buf12_buf14.writes = 
    [   MemoryDep('buf11', c0, {c0: 4096}),
        MemoryDep('buf12', c0, {c0: 4096}),
        MemoryDep('buf14', c0, {c0: 2097152})]
buf11_buf12_buf14.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 2097152})]
buf11_buf12_buf14.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2097152}),
        MemoryDep('arg4_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg5_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg6_1', c1, {c0: 4096, c1: 512})]
buf11_buf12_buf14.users = []
    buf11_buf12_buf14.snodes[0] =
    buf11: SchedulerNode(ComputedBuffer)
    buf11.writes = [MemoryDep('buf11', c0, {c0: 4096})]
    buf11.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 2097152})]
    buf11.met_dependencies = 
        [   MemoryDep('arg0_1', c0, {c0: 2097152}),
            MemoryDep('arg4_1', c1, {c0: 4096, c1: 512})]
    buf11.users = [NodeUser(node=SchedulerNode(name='buf14'), can_inplace=False, is_weak=False)]
    buf11.group.device = cuda:0
    buf11.group.iteration = (4096, 512)
    buf11.sizes = ([4096], [512])
    class buf11_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf10', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg4_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('arg0_1', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf11', get_index_3, getitem)
            return store_reduction
    buf11_buf12_buf14.snodes[1] =
    buf12: SchedulerNode(ComputedBuffer)
    buf12.writes = [MemoryDep('buf12', c0, {c0: 4096})]
    buf12.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 2097152})]
    buf12.met_dependencies = 
        [   MemoryDep('arg0_1', c0, {c0: 2097152}),
            MemoryDep('arg4_1', c1, {c0: 4096, c1: 512})]
    buf12.users = [NodeUser(node=SchedulerNode(name='buf14'), can_inplace=False, is_weak=False)]
    buf12.group.device = cuda:0
    buf12.group.iteration = (4096, 512)
    buf12.sizes = ([4096], [512])
    class buf12_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf10', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg4_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('arg0_1', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf12', get_index_3, getitem_1)
            return store_reduction
    buf11_buf12_buf14.snodes[2] =
    buf14: SchedulerNode(ComputedBuffer)
    buf14.writes = [MemoryDep('buf14', c0, {c0: 2097152})]
    buf14.unmet_dependencies = 
        [   MemoryDep('buf10', c0, {c0: 2097152}),
            MemoryDep('buf11', c0, {c0: 4096}),
            MemoryDep('buf12', c0, {c0: 4096})]
    buf14.met_dependencies = 
        [   MemoryDep('arg0_1', c0, {c0: 2097152}),
            MemoryDep('arg4_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg5_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg6_1', c1, {c0: 4096, c1: 512})]
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf15'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf18'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf19'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf20'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf21'), can_inplace=True, is_weak=False)]
    buf14.group.device = cuda:0
    buf14.group.iteration = (2097152, 1)
    buf14.sizes = ([4096, 512], [])
    class buf14_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf10', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg4_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('arg0_1', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf11', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf12', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg5_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg6_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf14', get_index_7, to_dtype_3, None)
            return store


buf15: ExternKernelSchedulerNode(ExternKernelOut)
buf15.writes = [StarDep(name='buf15')]
buf15.unmet_dependencies = [StarDep(name='buf14')]
buf15.met_dependencies = [StarDep(name='arg7_1')]
buf15.users = [NodeUser(node=SchedulerNode(name='buf16'), can_inplace=True, is_weak=False)]
buf15.node.kernel = extern_kernels.mm


buf16: SchedulerNode(ComputedBuffer)
buf16.writes = [MemoryDep('buf16', c0, {c0: 8388608})]
buf16.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 8388608})]
buf16.met_dependencies = [MemoryDep('arg8_1', c1, {c0: 4096, c1: 2048})]
buf16.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf17'), can_inplace=False, is_weak=False)]
buf16.group.device = cuda:0
buf16.group.iteration = (8388608, 1)
buf16.sizes = ([4096, 2048], [])
class buf16_loop_body:
    var_ranges = {z0: 4096, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg8_1', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf15', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg8_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf16', get_index_4, to_dtype_2, None)
        return store


buf17: ExternKernelSchedulerNode(ExternKernelOut)
buf17.writes = [StarDep(name='buf17')]
buf17.unmet_dependencies = [StarDep(name='buf16')]
buf17.met_dependencies = [StarDep(name='arg9_1')]
buf17.users = [NodeUser(node=SchedulerNode(name='buf18'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf19'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf20'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf21'), can_inplace=True, is_weak=False)]
buf17.node.kernel = extern_kernels.mm


buf18_buf19_buf21: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf18_buf19_buf21.writes = 
    [   MemoryDep('buf18', c0, {c0: 4096}),
        MemoryDep('buf19', c0, {c0: 4096}),
        MemoryDep('buf21', c0, {c0: 2097152})]
buf18_buf19_buf21.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 2097152}), MemoryDep('buf17', c0, {c0: 2097152})]
buf18_buf19_buf21.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg11_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg12_1', c1, {c0: 4096, c1: 512})]
buf18_buf19_buf21.users = []
    buf18_buf19_buf21.snodes[0] =
    buf18: SchedulerNode(ComputedBuffer)
    buf18.writes = [MemoryDep('buf18', c0, {c0: 4096})]
    buf18.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 2097152}), MemoryDep('buf17', c0, {c0: 2097152})]
    buf18.met_dependencies = [MemoryDep('arg10_1', c1, {c0: 4096, c1: 512})]
    buf18.users = [NodeUser(node=SchedulerNode(name='buf21'), can_inplace=False, is_weak=False)]
    buf18.group.device = cuda:0
    buf18.group.iteration = (4096, 512)
    buf18.sizes = ([4096], [512])
    class buf18_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf17', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg10_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf14', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf18', get_index_3, getitem)
            return store_reduction
    buf18_buf19_buf21.snodes[1] =
    buf19: SchedulerNode(ComputedBuffer)
    buf19.writes = [MemoryDep('buf19', c0, {c0: 4096})]
    buf19.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 2097152}), MemoryDep('buf17', c0, {c0: 2097152})]
    buf19.met_dependencies = [MemoryDep('arg10_1', c1, {c0: 4096, c1: 512})]
    buf19.users = [NodeUser(node=SchedulerNode(name='buf21'), can_inplace=False, is_weak=False)]
    buf19.group.device = cuda:0
    buf19.group.iteration = (4096, 512)
    buf19.sizes = ([4096], [512])
    class buf19_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf17', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg10_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf14', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf19', get_index_3, getitem_1)
            return store_reduction
    buf18_buf19_buf21.snodes[2] =
    buf21: SchedulerNode(ComputedBuffer)
    buf21.writes = [MemoryDep('buf21', c0, {c0: 2097152})]
    buf21.unmet_dependencies = 
        [   MemoryDep('buf14', c0, {c0: 2097152}),
            MemoryDep('buf17', c0, {c0: 2097152}),
            MemoryDep('buf18', c0, {c0: 4096}),
            MemoryDep('buf19', c0, {c0: 4096})]
    buf21.met_dependencies = 
        [   MemoryDep('arg10_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg11_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg12_1', c1, {c0: 4096, c1: 512})]
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf22'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf33'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf34'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf35'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf36'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf21.group.device = cuda:0
    buf21.group.iteration = (2097152, 1)
    buf21.sizes = ([4096, 512], [])
    class buf21_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf17', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg10_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf14', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf18', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf19', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg11_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg12_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf21', get_index_7, to_dtype_3, None)
            return store


buf22: ExternKernelSchedulerNode(ExternKernelOut)
buf22.writes = [StarDep(name='buf22')]
buf22.unmet_dependencies = [StarDep(name='buf21')]
buf22.met_dependencies = [StarDep(name='arg13_1')]
buf22.users = [NodeUser(node=SchedulerNode(name='buf23'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf24'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf25'), can_inplace=False, is_weak=False)]
buf22.node.kernel = extern_kernels.mm


buf23: SchedulerNode(ComputedBuffer)
buf23.writes = [MemoryDep('buf23', c0, {c0: 2097152})]
buf23.unmet_dependencies = [MemoryDep('buf22', 1536*c0 + c1, {c0: 4096, c1: 512})]
buf23.met_dependencies = [MemoryDep('arg14_1', c1, {c0: 4096, c1: 512})]
buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf26'), can_inplace=False, is_weak=False)]
buf23.group.device = cuda:0
buf23.group.iteration = (2097152, 1)
buf23.sizes = ([4096, 512], [])
class buf23_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg14_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf23', get_index_2, add, None)
        return store


buf24: SchedulerNode(ComputedBuffer)
buf24.writes = [MemoryDep('buf24', c0, {c0: 2097152})]
buf24.unmet_dependencies = [MemoryDep('buf22', 1536*c0 + c1 + 512, {c0: 4096, c1: 512})]
buf24.met_dependencies = [MemoryDep('arg14_1', c1 + 512, {c0: 4096, c1: 512})]
buf24.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf26'), can_inplace=False, is_weak=False)]
buf24.group.device = cuda:0
buf24.group.iteration = (2097152, 1)
buf24.sizes = ([4096, 512], [])
class buf24_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 512
    index1 = z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg14_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf24', get_index_2, add, None)
        return store


buf25: SchedulerNode(ComputedBuffer)
buf25.writes = [MemoryDep('buf25', c0, {c0: 2097152})]
buf25.unmet_dependencies = [MemoryDep('buf22', 1536*c0 + c1 + 1024, {c0: 4096, c1: 512})]
buf25.met_dependencies = [MemoryDep('arg14_1', c1 + 1024, {c0: 4096, c1: 512})]
buf25.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf26'), can_inplace=False, is_weak=False)]
buf25.group.device = cuda:0
buf25.group.iteration = (2097152, 1)
buf25.sizes = ([4096, 512], [])
class buf25_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 1024
    index1 = z1 + 1024
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg14_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf25', get_index_2, add, None)
        return store


buf26: ExternKernelSchedulerNode(FallbackKernel)
buf26.writes = [StarDep(name='buf26')]
buf26.unmet_dependencies = [StarDep(name='buf23'), StarDep(name='buf24'), StarDep(name='buf25')]
buf26.met_dependencies = []
buf26.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf27'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf28'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf29'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf30'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf31'), can_inplace=False, is_weak=False)]
buf26.node.kernel = None


buf27: ExternKernelSchedulerNode(MultiOutput)
buf27.writes = [StarDep(name='buf27')]
buf27.unmet_dependencies = [StarDep(name='buf26')]
buf27.met_dependencies = []
buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf32'), can_inplace=False, is_weak=False)]
buf27.node.kernel = None


buf32: ExternKernelSchedulerNode(ExternKernelOut)
buf32.writes = [StarDep(name='buf32')]
buf32.unmet_dependencies = [StarDep(name='buf27')]
buf32.met_dependencies = [StarDep(name='arg15_1')]
buf32.users = [NodeUser(node=SchedulerNode(name='buf33'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf34'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf35'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf36'), can_inplace=True, is_weak=False)]
buf32.node.kernel = extern_kernels.mm


buf33_buf34_buf36: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf33_buf34_buf36.writes = 
    [   MemoryDep('buf33', c0, {c0: 4096}),
        MemoryDep('buf34', c0, {c0: 4096}),
        MemoryDep('buf36', c0, {c0: 2097152})]
buf33_buf34_buf36.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 2097152}), MemoryDep('buf32', c0, {c0: 2097152})]
buf33_buf34_buf36.met_dependencies = 
    [   MemoryDep('arg16_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg17_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg18_1', c1, {c0: 4096, c1: 512})]
buf33_buf34_buf36.users = []
    buf33_buf34_buf36.snodes[0] =
    buf33: SchedulerNode(ComputedBuffer)
    buf33.writes = [MemoryDep('buf33', c0, {c0: 4096})]
    buf33.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 2097152}), MemoryDep('buf32', c0, {c0: 2097152})]
    buf33.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 4096, c1: 512})]
    buf33.users = [NodeUser(node=SchedulerNode(name='buf36'), can_inplace=False, is_weak=False)]
    buf33.group.device = cuda:0
    buf33.group.iteration = (4096, 512)
    buf33.sizes = ([4096], [512])
    class buf33_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf32', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg16_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf21', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf33', get_index_3, getitem)
            return store_reduction
    buf33_buf34_buf36.snodes[1] =
    buf34: SchedulerNode(ComputedBuffer)
    buf34.writes = [MemoryDep('buf34', c0, {c0: 4096})]
    buf34.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 2097152}), MemoryDep('buf32', c0, {c0: 2097152})]
    buf34.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 4096, c1: 512})]
    buf34.users = [NodeUser(node=SchedulerNode(name='buf36'), can_inplace=False, is_weak=False)]
    buf34.group.device = cuda:0
    buf34.group.iteration = (4096, 512)
    buf34.sizes = ([4096], [512])
    class buf34_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf32', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg16_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf21', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf34', get_index_3, getitem_1)
            return store_reduction
    buf33_buf34_buf36.snodes[2] =
    buf36: SchedulerNode(ComputedBuffer)
    buf36.writes = [MemoryDep('buf36', c0, {c0: 2097152})]
    buf36.unmet_dependencies = 
        [   MemoryDep('buf21', c0, {c0: 2097152}),
            MemoryDep('buf32', c0, {c0: 2097152}),
            MemoryDep('buf33', c0, {c0: 4096}),
            MemoryDep('buf34', c0, {c0: 4096})]
    buf36.met_dependencies = 
        [   MemoryDep('arg16_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg17_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg18_1', c1, {c0: 4096, c1: 512})]
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf37'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf40'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf41'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf42'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf43'), can_inplace=True, is_weak=False)]
    buf36.group.device = cuda:0
    buf36.group.iteration = (2097152, 1)
    buf36.sizes = ([4096, 512], [])
    class buf36_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf32', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg16_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf21', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf33', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf34', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg17_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg18_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf36', get_index_7, to_dtype_3, None)
            return store


buf37: ExternKernelSchedulerNode(ExternKernelOut)
buf37.writes = [StarDep(name='buf37')]
buf37.unmet_dependencies = [StarDep(name='buf36')]
buf37.met_dependencies = [StarDep(name='arg19_1')]
buf37.users = [NodeUser(node=SchedulerNode(name='buf38'), can_inplace=True, is_weak=False)]
buf37.node.kernel = extern_kernels.mm


buf38: SchedulerNode(ComputedBuffer)
buf38.writes = [MemoryDep('buf38', c0, {c0: 8388608})]
buf38.unmet_dependencies = [MemoryDep('buf37', c0, {c0: 8388608})]
buf38.met_dependencies = [MemoryDep('arg20_1', c1, {c0: 4096, c1: 2048})]
buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf39'), can_inplace=False, is_weak=False)]
buf38.group.device = cuda:0
buf38.group.iteration = (8388608, 1)
buf38.sizes = ([4096, 2048], [])
class buf38_loop_body:
    var_ranges = {z0: 4096, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg20_1', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf37', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg20_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf38', get_index_4, to_dtype_2, None)
        return store


buf39: ExternKernelSchedulerNode(ExternKernelOut)
buf39.writes = [StarDep(name='buf39')]
buf39.unmet_dependencies = [StarDep(name='buf38')]
buf39.met_dependencies = [StarDep(name='arg21_1')]
buf39.users = [NodeUser(node=SchedulerNode(name='buf40'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf41'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf42'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf43'), can_inplace=True, is_weak=False)]
buf39.node.kernel = extern_kernels.mm


buf40_buf41_buf43: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf40_buf41_buf43.writes = 
    [   MemoryDep('buf40', c0, {c0: 4096}),
        MemoryDep('buf41', c0, {c0: 4096}),
        MemoryDep('buf43', c0, {c0: 2097152})]
buf40_buf41_buf43.unmet_dependencies = [MemoryDep('buf36', c0, {c0: 2097152}), MemoryDep('buf39', c0, {c0: 2097152})]
buf40_buf41_buf43.met_dependencies = 
    [   MemoryDep('arg22_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg23_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg24_1', c1, {c0: 4096, c1: 512})]
buf40_buf41_buf43.users = []
    buf40_buf41_buf43.snodes[0] =
    buf40: SchedulerNode(ComputedBuffer)
    buf40.writes = [MemoryDep('buf40', c0, {c0: 4096})]
    buf40.unmet_dependencies = [MemoryDep('buf36', c0, {c0: 2097152}), MemoryDep('buf39', c0, {c0: 2097152})]
    buf40.met_dependencies = [MemoryDep('arg22_1', c1, {c0: 4096, c1: 512})]
    buf40.users = [NodeUser(node=SchedulerNode(name='buf43'), can_inplace=False, is_weak=False)]
    buf40.group.device = cuda:0
    buf40.group.iteration = (4096, 512)
    buf40.sizes = ([4096], [512])
    class buf40_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf39', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg22_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf36', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf40', get_index_3, getitem)
            return store_reduction
    buf40_buf41_buf43.snodes[1] =
    buf41: SchedulerNode(ComputedBuffer)
    buf41.writes = [MemoryDep('buf41', c0, {c0: 4096})]
    buf41.unmet_dependencies = [MemoryDep('buf36', c0, {c0: 2097152}), MemoryDep('buf39', c0, {c0: 2097152})]
    buf41.met_dependencies = [MemoryDep('arg22_1', c1, {c0: 4096, c1: 512})]
    buf41.users = [NodeUser(node=SchedulerNode(name='buf43'), can_inplace=False, is_weak=False)]
    buf41.group.device = cuda:0
    buf41.group.iteration = (4096, 512)
    buf41.sizes = ([4096], [512])
    class buf41_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf39', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg22_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf36', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf41', get_index_3, getitem_1)
            return store_reduction
    buf40_buf41_buf43.snodes[2] =
    buf43: SchedulerNode(ComputedBuffer)
    buf43.writes = [MemoryDep('buf43', c0, {c0: 2097152})]
    buf43.unmet_dependencies = 
        [   MemoryDep('buf36', c0, {c0: 2097152}),
            MemoryDep('buf39', c0, {c0: 2097152}),
            MemoryDep('buf40', c0, {c0: 4096}),
            MemoryDep('buf41', c0, {c0: 4096})]
    buf43.met_dependencies = 
        [   MemoryDep('arg22_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg23_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg24_1', c1, {c0: 4096, c1: 512})]
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf44'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf55'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf56'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf57'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf58'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf43.group.device = cuda:0
    buf43.group.iteration = (2097152, 1)
    buf43.sizes = ([4096, 512], [])
    class buf43_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf39', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg22_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf36', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf40', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf41', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg23_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg24_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf43', get_index_7, to_dtype_3, None)
            return store


buf44: ExternKernelSchedulerNode(ExternKernelOut)
buf44.writes = [StarDep(name='buf44')]
buf44.unmet_dependencies = [StarDep(name='buf43')]
buf44.met_dependencies = [StarDep(name='arg25_1')]
buf44.users = [NodeUser(node=SchedulerNode(name='buf45'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf46'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf47'), can_inplace=False, is_weak=False)]
buf44.node.kernel = extern_kernels.mm


buf45: SchedulerNode(ComputedBuffer)
buf45.writes = [MemoryDep('buf45', c0, {c0: 2097152})]
buf45.unmet_dependencies = [MemoryDep('buf44', 1536*c0 + c1, {c0: 4096, c1: 512})]
buf45.met_dependencies = [MemoryDep('arg26_1', c1, {c0: 4096, c1: 512})]
buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf48'), can_inplace=False, is_weak=False)]
buf45.group.device = cuda:0
buf45.group.iteration = (2097152, 1)
buf45.sizes = ([4096, 512], [])
class buf45_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf45', get_index_2, add, None)
        return store


buf46: SchedulerNode(ComputedBuffer)
buf46.writes = [MemoryDep('buf46', c0, {c0: 2097152})]
buf46.unmet_dependencies = [MemoryDep('buf44', 1536*c0 + c1 + 512, {c0: 4096, c1: 512})]
buf46.met_dependencies = [MemoryDep('arg26_1', c1 + 512, {c0: 4096, c1: 512})]
buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf48'), can_inplace=False, is_weak=False)]
buf46.group.device = cuda:0
buf46.group.iteration = (2097152, 1)
buf46.sizes = ([4096, 512], [])
class buf46_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 512
    index1 = z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf46', get_index_2, add, None)
        return store


buf47: SchedulerNode(ComputedBuffer)
buf47.writes = [MemoryDep('buf47', c0, {c0: 2097152})]
buf47.unmet_dependencies = [MemoryDep('buf44', 1536*c0 + c1 + 1024, {c0: 4096, c1: 512})]
buf47.met_dependencies = [MemoryDep('arg26_1', c1 + 1024, {c0: 4096, c1: 512})]
buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf48'), can_inplace=False, is_weak=False)]
buf47.group.device = cuda:0
buf47.group.iteration = (2097152, 1)
buf47.sizes = ([4096, 512], [])
class buf47_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 1024
    index1 = z1 + 1024
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf47', get_index_2, add, None)
        return store


buf48: ExternKernelSchedulerNode(FallbackKernel)
buf48.writes = [StarDep(name='buf48')]
buf48.unmet_dependencies = [StarDep(name='buf45'), StarDep(name='buf46'), StarDep(name='buf47')]
buf48.met_dependencies = []
buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf49'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf50'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf51'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf52'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf53'), can_inplace=False, is_weak=False)]
buf48.node.kernel = None


buf49: ExternKernelSchedulerNode(MultiOutput)
buf49.writes = [StarDep(name='buf49')]
buf49.unmet_dependencies = [StarDep(name='buf48')]
buf49.met_dependencies = []
buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf54'), can_inplace=False, is_weak=False)]
buf49.node.kernel = None


buf54: ExternKernelSchedulerNode(ExternKernelOut)
buf54.writes = [StarDep(name='buf54')]
buf54.unmet_dependencies = [StarDep(name='buf49')]
buf54.met_dependencies = [StarDep(name='arg27_1')]
buf54.users = [NodeUser(node=SchedulerNode(name='buf55'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf56'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf57'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf58'), can_inplace=True, is_weak=False)]
buf54.node.kernel = extern_kernels.mm


buf55_buf56_buf58: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf55_buf56_buf58.writes = 
    [   MemoryDep('buf55', c0, {c0: 4096}),
        MemoryDep('buf56', c0, {c0: 4096}),
        MemoryDep('buf58', c0, {c0: 2097152})]
buf55_buf56_buf58.unmet_dependencies = [MemoryDep('buf43', c0, {c0: 2097152}), MemoryDep('buf54', c0, {c0: 2097152})]
buf55_buf56_buf58.met_dependencies = 
    [   MemoryDep('arg28_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg29_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg30_1', c1, {c0: 4096, c1: 512})]
buf55_buf56_buf58.users = []
    buf55_buf56_buf58.snodes[0] =
    buf55: SchedulerNode(ComputedBuffer)
    buf55.writes = [MemoryDep('buf55', c0, {c0: 4096})]
    buf55.unmet_dependencies = [MemoryDep('buf43', c0, {c0: 2097152}), MemoryDep('buf54', c0, {c0: 2097152})]
    buf55.met_dependencies = [MemoryDep('arg28_1', c1, {c0: 4096, c1: 512})]
    buf55.users = [NodeUser(node=SchedulerNode(name='buf58'), can_inplace=False, is_weak=False)]
    buf55.group.device = cuda:0
    buf55.group.iteration = (4096, 512)
    buf55.sizes = ([4096], [512])
    class buf55_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf54', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg28_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf43', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf55', get_index_3, getitem)
            return store_reduction
    buf55_buf56_buf58.snodes[1] =
    buf56: SchedulerNode(ComputedBuffer)
    buf56.writes = [MemoryDep('buf56', c0, {c0: 4096})]
    buf56.unmet_dependencies = [MemoryDep('buf43', c0, {c0: 2097152}), MemoryDep('buf54', c0, {c0: 2097152})]
    buf56.met_dependencies = [MemoryDep('arg28_1', c1, {c0: 4096, c1: 512})]
    buf56.users = [NodeUser(node=SchedulerNode(name='buf58'), can_inplace=False, is_weak=False)]
    buf56.group.device = cuda:0
    buf56.group.iteration = (4096, 512)
    buf56.sizes = ([4096], [512])
    class buf56_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf54', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg28_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf43', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf56', get_index_3, getitem_1)
            return store_reduction
    buf55_buf56_buf58.snodes[2] =
    buf58: SchedulerNode(ComputedBuffer)
    buf58.writes = [MemoryDep('buf58', c0, {c0: 2097152})]
    buf58.unmet_dependencies = 
        [   MemoryDep('buf43', c0, {c0: 2097152}),
            MemoryDep('buf54', c0, {c0: 2097152}),
            MemoryDep('buf55', c0, {c0: 4096}),
            MemoryDep('buf56', c0, {c0: 4096})]
    buf58.met_dependencies = 
        [   MemoryDep('arg28_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg29_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg30_1', c1, {c0: 4096, c1: 512})]
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf59'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf62'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf63'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf64'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf65'), can_inplace=True, is_weak=False)]
    buf58.group.device = cuda:0
    buf58.group.iteration = (2097152, 1)
    buf58.sizes = ([4096, 512], [])
    class buf58_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf54', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg28_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf43', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf55', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf56', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg29_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg30_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf58', get_index_7, to_dtype_3, None)
            return store


buf59: ExternKernelSchedulerNode(ExternKernelOut)
buf59.writes = [StarDep(name='buf59')]
buf59.unmet_dependencies = [StarDep(name='buf58')]
buf59.met_dependencies = [StarDep(name='arg31_1')]
buf59.users = [NodeUser(node=SchedulerNode(name='buf60'), can_inplace=True, is_weak=False)]
buf59.node.kernel = extern_kernels.mm


buf60: SchedulerNode(ComputedBuffer)
buf60.writes = [MemoryDep('buf60', c0, {c0: 8388608})]
buf60.unmet_dependencies = [MemoryDep('buf59', c0, {c0: 8388608})]
buf60.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 4096, c1: 2048})]
buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf61'), can_inplace=False, is_weak=False)]
buf60.group.device = cuda:0
buf60.group.iteration = (8388608, 1)
buf60.sizes = ([4096, 2048], [])
class buf60_loop_body:
    var_ranges = {z0: 4096, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf59', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg32_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf60', get_index_4, to_dtype_2, None)
        return store


buf61: ExternKernelSchedulerNode(ExternKernelOut)
buf61.writes = [StarDep(name='buf61')]
buf61.unmet_dependencies = [StarDep(name='buf60')]
buf61.met_dependencies = [StarDep(name='arg33_1')]
buf61.users = [NodeUser(node=SchedulerNode(name='buf62'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf63'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf64'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf65'), can_inplace=True, is_weak=False)]
buf61.node.kernel = extern_kernels.mm


buf62_buf63_buf65: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf62_buf63_buf65.writes = 
    [   MemoryDep('buf62', c0, {c0: 4096}),
        MemoryDep('buf63', c0, {c0: 4096}),
        MemoryDep('buf65', c0, {c0: 2097152})]
buf62_buf63_buf65.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 2097152}), MemoryDep('buf61', c0, {c0: 2097152})]
buf62_buf63_buf65.met_dependencies = 
    [   MemoryDep('arg34_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg35_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg36_1', c1, {c0: 4096, c1: 512})]
buf62_buf63_buf65.users = []
    buf62_buf63_buf65.snodes[0] =
    buf62: SchedulerNode(ComputedBuffer)
    buf62.writes = [MemoryDep('buf62', c0, {c0: 4096})]
    buf62.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 2097152}), MemoryDep('buf61', c0, {c0: 2097152})]
    buf62.met_dependencies = [MemoryDep('arg34_1', c1, {c0: 4096, c1: 512})]
    buf62.users = [NodeUser(node=SchedulerNode(name='buf65'), can_inplace=False, is_weak=False)]
    buf62.group.device = cuda:0
    buf62.group.iteration = (4096, 512)
    buf62.sizes = ([4096], [512])
    class buf62_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf61', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg34_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf58', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf62', get_index_3, getitem)
            return store_reduction
    buf62_buf63_buf65.snodes[1] =
    buf63: SchedulerNode(ComputedBuffer)
    buf63.writes = [MemoryDep('buf63', c0, {c0: 4096})]
    buf63.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 2097152}), MemoryDep('buf61', c0, {c0: 2097152})]
    buf63.met_dependencies = [MemoryDep('arg34_1', c1, {c0: 4096, c1: 512})]
    buf63.users = [NodeUser(node=SchedulerNode(name='buf65'), can_inplace=False, is_weak=False)]
    buf63.group.device = cuda:0
    buf63.group.iteration = (4096, 512)
    buf63.sizes = ([4096], [512])
    class buf63_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf61', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg34_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf58', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf63', get_index_3, getitem_1)
            return store_reduction
    buf62_buf63_buf65.snodes[2] =
    buf65: SchedulerNode(ComputedBuffer)
    buf65.writes = [MemoryDep('buf65', c0, {c0: 2097152})]
    buf65.unmet_dependencies = 
        [   MemoryDep('buf58', c0, {c0: 2097152}),
            MemoryDep('buf61', c0, {c0: 2097152}),
            MemoryDep('buf62', c0, {c0: 4096}),
            MemoryDep('buf63', c0, {c0: 4096})]
    buf65.met_dependencies = 
        [   MemoryDep('arg34_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg35_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg36_1', c1, {c0: 4096, c1: 512})]
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf66'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf77'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf78'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf79'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf80'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf65.group.device = cuda:0
    buf65.group.iteration = (2097152, 1)
    buf65.sizes = ([4096, 512], [])
    class buf65_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf61', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg34_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf58', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf62', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf63', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg35_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg36_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf65', get_index_7, to_dtype_3, None)
            return store


buf66: ExternKernelSchedulerNode(ExternKernelOut)
buf66.writes = [StarDep(name='buf66')]
buf66.unmet_dependencies = [StarDep(name='buf65')]
buf66.met_dependencies = [StarDep(name='arg37_1')]
buf66.users = [NodeUser(node=SchedulerNode(name='buf67'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf68'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf69'), can_inplace=False, is_weak=False)]
buf66.node.kernel = extern_kernels.mm


buf67: SchedulerNode(ComputedBuffer)
buf67.writes = [MemoryDep('buf67', c0, {c0: 2097152})]
buf67.unmet_dependencies = [MemoryDep('buf66', 1536*c0 + c1, {c0: 4096, c1: 512})]
buf67.met_dependencies = [MemoryDep('arg38_1', c1, {c0: 4096, c1: 512})]
buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf70'), can_inplace=False, is_weak=False)]
buf67.group.device = cuda:0
buf67.group.iteration = (2097152, 1)
buf67.sizes = ([4096, 512], [])
class buf67_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg38_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf67', get_index_2, add, None)
        return store


buf68: SchedulerNode(ComputedBuffer)
buf68.writes = [MemoryDep('buf68', c0, {c0: 2097152})]
buf68.unmet_dependencies = [MemoryDep('buf66', 1536*c0 + c1 + 512, {c0: 4096, c1: 512})]
buf68.met_dependencies = [MemoryDep('arg38_1', c1 + 512, {c0: 4096, c1: 512})]
buf68.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf70'), can_inplace=False, is_weak=False)]
buf68.group.device = cuda:0
buf68.group.iteration = (2097152, 1)
buf68.sizes = ([4096, 512], [])
class buf68_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 512
    index1 = z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg38_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf68', get_index_2, add, None)
        return store


buf69: SchedulerNode(ComputedBuffer)
buf69.writes = [MemoryDep('buf69', c0, {c0: 2097152})]
buf69.unmet_dependencies = [MemoryDep('buf66', 1536*c0 + c1 + 1024, {c0: 4096, c1: 512})]
buf69.met_dependencies = [MemoryDep('arg38_1', c1 + 1024, {c0: 4096, c1: 512})]
buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf70'), can_inplace=False, is_weak=False)]
buf69.group.device = cuda:0
buf69.group.iteration = (2097152, 1)
buf69.sizes = ([4096, 512], [])
class buf69_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 1024
    index1 = z1 + 1024
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg38_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf69', get_index_2, add, None)
        return store


buf70: ExternKernelSchedulerNode(FallbackKernel)
buf70.writes = [StarDep(name='buf70')]
buf70.unmet_dependencies = [StarDep(name='buf67'), StarDep(name='buf68'), StarDep(name='buf69')]
buf70.met_dependencies = []
buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf71'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf72'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf73'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf74'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf75'), can_inplace=False, is_weak=False)]
buf70.node.kernel = None


buf71: ExternKernelSchedulerNode(MultiOutput)
buf71.writes = [StarDep(name='buf71')]
buf71.unmet_dependencies = [StarDep(name='buf70')]
buf71.met_dependencies = []
buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf76'), can_inplace=False, is_weak=False)]
buf71.node.kernel = None


buf76: ExternKernelSchedulerNode(ExternKernelOut)
buf76.writes = [StarDep(name='buf76')]
buf76.unmet_dependencies = [StarDep(name='buf71')]
buf76.met_dependencies = [StarDep(name='arg39_1')]
buf76.users = [NodeUser(node=SchedulerNode(name='buf77'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf78'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf79'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf80'), can_inplace=True, is_weak=False)]
buf76.node.kernel = extern_kernels.mm


buf77_buf78_buf80: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf77_buf78_buf80.writes = 
    [   MemoryDep('buf77', c0, {c0: 4096}),
        MemoryDep('buf78', c0, {c0: 4096}),
        MemoryDep('buf80', c0, {c0: 2097152})]
buf77_buf78_buf80.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 2097152}), MemoryDep('buf76', c0, {c0: 2097152})]
buf77_buf78_buf80.met_dependencies = 
    [   MemoryDep('arg40_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg41_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg42_1', c1, {c0: 4096, c1: 512})]
buf77_buf78_buf80.users = []
    buf77_buf78_buf80.snodes[0] =
    buf77: SchedulerNode(ComputedBuffer)
    buf77.writes = [MemoryDep('buf77', c0, {c0: 4096})]
    buf77.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 2097152}), MemoryDep('buf76', c0, {c0: 2097152})]
    buf77.met_dependencies = [MemoryDep('arg40_1', c1, {c0: 4096, c1: 512})]
    buf77.users = [NodeUser(node=SchedulerNode(name='buf80'), can_inplace=False, is_weak=False)]
    buf77.group.device = cuda:0
    buf77.group.iteration = (4096, 512)
    buf77.sizes = ([4096], [512])
    class buf77_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf76', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg40_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf65', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf77', get_index_3, getitem)
            return store_reduction
    buf77_buf78_buf80.snodes[1] =
    buf78: SchedulerNode(ComputedBuffer)
    buf78.writes = [MemoryDep('buf78', c0, {c0: 4096})]
    buf78.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 2097152}), MemoryDep('buf76', c0, {c0: 2097152})]
    buf78.met_dependencies = [MemoryDep('arg40_1', c1, {c0: 4096, c1: 512})]
    buf78.users = [NodeUser(node=SchedulerNode(name='buf80'), can_inplace=False, is_weak=False)]
    buf78.group.device = cuda:0
    buf78.group.iteration = (4096, 512)
    buf78.sizes = ([4096], [512])
    class buf78_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf76', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg40_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf65', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf78', get_index_3, getitem_1)
            return store_reduction
    buf77_buf78_buf80.snodes[2] =
    buf80: SchedulerNode(ComputedBuffer)
    buf80.writes = [MemoryDep('buf80', c0, {c0: 2097152})]
    buf80.unmet_dependencies = 
        [   MemoryDep('buf65', c0, {c0: 2097152}),
            MemoryDep('buf76', c0, {c0: 2097152}),
            MemoryDep('buf77', c0, {c0: 4096}),
            MemoryDep('buf78', c0, {c0: 4096})]
    buf80.met_dependencies = 
        [   MemoryDep('arg40_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg41_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg42_1', c1, {c0: 4096, c1: 512})]
    buf80.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf81'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf84'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf85'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf86'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf87'), can_inplace=True, is_weak=False)]
    buf80.group.device = cuda:0
    buf80.group.iteration = (2097152, 1)
    buf80.sizes = ([4096, 512], [])
    class buf80_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf76', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg40_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf65', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf77', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf78', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg41_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg42_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf80', get_index_7, to_dtype_3, None)
            return store


buf81: ExternKernelSchedulerNode(ExternKernelOut)
buf81.writes = [StarDep(name='buf81')]
buf81.unmet_dependencies = [StarDep(name='buf80')]
buf81.met_dependencies = [StarDep(name='arg43_1')]
buf81.users = [NodeUser(node=SchedulerNode(name='buf82'), can_inplace=True, is_weak=False)]
buf81.node.kernel = extern_kernels.mm


buf82: SchedulerNode(ComputedBuffer)
buf82.writes = [MemoryDep('buf82', c0, {c0: 8388608})]
buf82.unmet_dependencies = [MemoryDep('buf81', c0, {c0: 8388608})]
buf82.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 4096, c1: 2048})]
buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf83'), can_inplace=False, is_weak=False)]
buf82.group.device = cuda:0
buf82.group.iteration = (8388608, 1)
buf82.sizes = ([4096, 2048], [])
class buf82_loop_body:
    var_ranges = {z0: 4096, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf81', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg44_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf82', get_index_4, to_dtype_2, None)
        return store


buf83: ExternKernelSchedulerNode(ExternKernelOut)
buf83.writes = [StarDep(name='buf83')]
buf83.unmet_dependencies = [StarDep(name='buf82')]
buf83.met_dependencies = [StarDep(name='arg45_1')]
buf83.users = [NodeUser(node=SchedulerNode(name='buf84'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf85'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf86'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf87'), can_inplace=True, is_weak=False)]
buf83.node.kernel = extern_kernels.mm


buf84_buf85_buf87: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf84_buf85_buf87.writes = 
    [   MemoryDep('buf84', c0, {c0: 4096}),
        MemoryDep('buf85', c0, {c0: 4096}),
        MemoryDep('buf87', c0, {c0: 2097152})]
buf84_buf85_buf87.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 2097152}), MemoryDep('buf83', c0, {c0: 2097152})]
buf84_buf85_buf87.met_dependencies = 
    [   MemoryDep('arg46_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg47_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg48_1', c1, {c0: 4096, c1: 512})]
buf84_buf85_buf87.users = []
    buf84_buf85_buf87.snodes[0] =
    buf84: SchedulerNode(ComputedBuffer)
    buf84.writes = [MemoryDep('buf84', c0, {c0: 4096})]
    buf84.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 2097152}), MemoryDep('buf83', c0, {c0: 2097152})]
    buf84.met_dependencies = [MemoryDep('arg46_1', c1, {c0: 4096, c1: 512})]
    buf84.users = [NodeUser(node=SchedulerNode(name='buf87'), can_inplace=False, is_weak=False)]
    buf84.group.device = cuda:0
    buf84.group.iteration = (4096, 512)
    buf84.sizes = ([4096], [512])
    class buf84_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf83', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg46_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf80', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf84', get_index_3, getitem)
            return store_reduction
    buf84_buf85_buf87.snodes[1] =
    buf85: SchedulerNode(ComputedBuffer)
    buf85.writes = [MemoryDep('buf85', c0, {c0: 4096})]
    buf85.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 2097152}), MemoryDep('buf83', c0, {c0: 2097152})]
    buf85.met_dependencies = [MemoryDep('arg46_1', c1, {c0: 4096, c1: 512})]
    buf85.users = [NodeUser(node=SchedulerNode(name='buf87'), can_inplace=False, is_weak=False)]
    buf85.group.device = cuda:0
    buf85.group.iteration = (4096, 512)
    buf85.sizes = ([4096], [512])
    class buf85_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf83', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg46_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf80', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf85', get_index_3, getitem_1)
            return store_reduction
    buf84_buf85_buf87.snodes[2] =
    buf87: SchedulerNode(ComputedBuffer)
    buf87.writes = [MemoryDep('buf87', c0, {c0: 2097152})]
    buf87.unmet_dependencies = 
        [   MemoryDep('buf80', c0, {c0: 2097152}),
            MemoryDep('buf83', c0, {c0: 2097152}),
            MemoryDep('buf84', c0, {c0: 4096}),
            MemoryDep('buf85', c0, {c0: 4096})]
    buf87.met_dependencies = 
        [   MemoryDep('arg46_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg47_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg48_1', c1, {c0: 4096, c1: 512})]
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf88'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf99'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf100'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf101'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf102'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf87.group.device = cuda:0
    buf87.group.iteration = (2097152, 1)
    buf87.sizes = ([4096, 512], [])
    class buf87_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf83', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg46_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf80', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf84', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf85', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg47_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg48_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf87', get_index_7, to_dtype_3, None)
            return store


buf88: ExternKernelSchedulerNode(ExternKernelOut)
buf88.writes = [StarDep(name='buf88')]
buf88.unmet_dependencies = [StarDep(name='buf87')]
buf88.met_dependencies = [StarDep(name='arg49_1')]
buf88.users = [NodeUser(node=SchedulerNode(name='buf89'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf90'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf91'), can_inplace=False, is_weak=False)]
buf88.node.kernel = extern_kernels.mm


buf89: SchedulerNode(ComputedBuffer)
buf89.writes = [MemoryDep('buf89', c0, {c0: 2097152})]
buf89.unmet_dependencies = [MemoryDep('buf88', 1536*c0 + c1, {c0: 4096, c1: 512})]
buf89.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 4096, c1: 512})]
buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf92'), can_inplace=False, is_weak=False)]
buf89.group.device = cuda:0
buf89.group.iteration = (2097152, 1)
buf89.sizes = ([4096, 512], [])
class buf89_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg50_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf89', get_index_2, add, None)
        return store


buf90: SchedulerNode(ComputedBuffer)
buf90.writes = [MemoryDep('buf90', c0, {c0: 2097152})]
buf90.unmet_dependencies = [MemoryDep('buf88', 1536*c0 + c1 + 512, {c0: 4096, c1: 512})]
buf90.met_dependencies = [MemoryDep('arg50_1', c1 + 512, {c0: 4096, c1: 512})]
buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf92'), can_inplace=False, is_weak=False)]
buf90.group.device = cuda:0
buf90.group.iteration = (2097152, 1)
buf90.sizes = ([4096, 512], [])
class buf90_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 512
    index1 = z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg50_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf90', get_index_2, add, None)
        return store


buf91: SchedulerNode(ComputedBuffer)
buf91.writes = [MemoryDep('buf91', c0, {c0: 2097152})]
buf91.unmet_dependencies = [MemoryDep('buf88', 1536*c0 + c1 + 1024, {c0: 4096, c1: 512})]
buf91.met_dependencies = [MemoryDep('arg50_1', c1 + 1024, {c0: 4096, c1: 512})]
buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf92'), can_inplace=False, is_weak=False)]
buf91.group.device = cuda:0
buf91.group.iteration = (2097152, 1)
buf91.sizes = ([4096, 512], [])
class buf91_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 1024
    index1 = z1 + 1024
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg50_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf91', get_index_2, add, None)
        return store


buf92: ExternKernelSchedulerNode(FallbackKernel)
buf92.writes = [StarDep(name='buf92')]
buf92.unmet_dependencies = [StarDep(name='buf89'), StarDep(name='buf90'), StarDep(name='buf91')]
buf92.met_dependencies = []
buf92.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf93'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf94'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf95'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf96'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf97'), can_inplace=False, is_weak=False)]
buf92.node.kernel = None


buf93: ExternKernelSchedulerNode(MultiOutput)
buf93.writes = [StarDep(name='buf93')]
buf93.unmet_dependencies = [StarDep(name='buf92')]
buf93.met_dependencies = []
buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf98'), can_inplace=False, is_weak=False)]
buf93.node.kernel = None


buf98: ExternKernelSchedulerNode(ExternKernelOut)
buf98.writes = [StarDep(name='buf98')]
buf98.unmet_dependencies = [StarDep(name='buf93')]
buf98.met_dependencies = [StarDep(name='arg51_1')]
buf98.users = [NodeUser(node=SchedulerNode(name='buf99'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf100'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf101'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf102'), can_inplace=True, is_weak=False)]
buf98.node.kernel = extern_kernels.mm


buf99_buf100_buf102: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf99_buf100_buf102.writes = 
    [   MemoryDep('buf100', c0, {c0: 4096}),
        MemoryDep('buf102', c0, {c0: 2097152}),
        MemoryDep('buf99', c0, {c0: 4096})]
buf99_buf100_buf102.unmet_dependencies = [MemoryDep('buf87', c0, {c0: 2097152}), MemoryDep('buf98', c0, {c0: 2097152})]
buf99_buf100_buf102.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg53_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg54_1', c1, {c0: 4096, c1: 512})]
buf99_buf100_buf102.users = []
    buf99_buf100_buf102.snodes[0] =
    buf99: SchedulerNode(ComputedBuffer)
    buf99.writes = [MemoryDep('buf99', c0, {c0: 4096})]
    buf99.unmet_dependencies = [MemoryDep('buf87', c0, {c0: 2097152}), MemoryDep('buf98', c0, {c0: 2097152})]
    buf99.met_dependencies = [MemoryDep('arg52_1', c1, {c0: 4096, c1: 512})]
    buf99.users = [NodeUser(node=SchedulerNode(name='buf102'), can_inplace=False, is_weak=False)]
    buf99.group.device = cuda:0
    buf99.group.iteration = (4096, 512)
    buf99.sizes = ([4096], [512])
    class buf99_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf98', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg52_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf87', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf99', get_index_3, getitem)
            return store_reduction
    buf99_buf100_buf102.snodes[1] =
    buf100: SchedulerNode(ComputedBuffer)
    buf100.writes = [MemoryDep('buf100', c0, {c0: 4096})]
    buf100.unmet_dependencies = [MemoryDep('buf87', c0, {c0: 2097152}), MemoryDep('buf98', c0, {c0: 2097152})]
    buf100.met_dependencies = [MemoryDep('arg52_1', c1, {c0: 4096, c1: 512})]
    buf100.users = [NodeUser(node=SchedulerNode(name='buf102'), can_inplace=False, is_weak=False)]
    buf100.group.device = cuda:0
    buf100.group.iteration = (4096, 512)
    buf100.sizes = ([4096], [512])
    class buf100_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf98', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg52_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf87', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf100', get_index_3, getitem_1)
            return store_reduction
    buf99_buf100_buf102.snodes[2] =
    buf102: SchedulerNode(ComputedBuffer)
    buf102.writes = [MemoryDep('buf102', c0, {c0: 2097152})]
    buf102.unmet_dependencies = 
        [   MemoryDep('buf100', c0, {c0: 4096}),
            MemoryDep('buf87', c0, {c0: 2097152}),
            MemoryDep('buf98', c0, {c0: 2097152}),
            MemoryDep('buf99', c0, {c0: 4096})]
    buf102.met_dependencies = 
        [   MemoryDep('arg52_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg53_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg54_1', c1, {c0: 4096, c1: 512})]
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf103'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf106'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf107'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf108'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf109'), can_inplace=True, is_weak=False)]
    buf102.group.device = cuda:0
    buf102.group.iteration = (2097152, 1)
    buf102.sizes = ([4096, 512], [])
    class buf102_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf98', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg52_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf87', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf99', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf100', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg53_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg54_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf102', get_index_7, to_dtype_3, None)
            return store


buf103: ExternKernelSchedulerNode(ExternKernelOut)
buf103.writes = [StarDep(name='buf103')]
buf103.unmet_dependencies = [StarDep(name='buf102')]
buf103.met_dependencies = [StarDep(name='arg55_1')]
buf103.users = [NodeUser(node=SchedulerNode(name='buf104'), can_inplace=True, is_weak=False)]
buf103.node.kernel = extern_kernels.mm


buf104: SchedulerNode(ComputedBuffer)
buf104.writes = [MemoryDep('buf104', c0, {c0: 8388608})]
buf104.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 8388608})]
buf104.met_dependencies = [MemoryDep('arg56_1', c1, {c0: 4096, c1: 2048})]
buf104.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf105'), can_inplace=False, is_weak=False)]
buf104.group.device = cuda:0
buf104.group.iteration = (8388608, 1)
buf104.sizes = ([4096, 2048], [])
class buf104_loop_body:
    var_ranges = {z0: 4096, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg56_1', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf103', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg56_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf104', get_index_4, to_dtype_2, None)
        return store


buf105: ExternKernelSchedulerNode(ExternKernelOut)
buf105.writes = [StarDep(name='buf105')]
buf105.unmet_dependencies = [StarDep(name='buf104')]
buf105.met_dependencies = [StarDep(name='arg57_1')]
buf105.users = [NodeUser(node=SchedulerNode(name='buf106'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf107'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf108'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf109'), can_inplace=True, is_weak=False)]
buf105.node.kernel = extern_kernels.mm


buf106_buf107_buf109: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf106_buf107_buf109.writes = 
    [   MemoryDep('buf106', c0, {c0: 4096}),
        MemoryDep('buf107', c0, {c0: 4096}),
        MemoryDep('buf109', c0, {c0: 2097152})]
buf106_buf107_buf109.unmet_dependencies = [MemoryDep('buf102', c0, {c0: 2097152}), MemoryDep('buf105', c0, {c0: 2097152})]
buf106_buf107_buf109.met_dependencies = 
    [   MemoryDep('arg58_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg59_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg60_1', c1, {c0: 4096, c1: 512})]
buf106_buf107_buf109.users = []
    buf106_buf107_buf109.snodes[0] =
    buf106: SchedulerNode(ComputedBuffer)
    buf106.writes = [MemoryDep('buf106', c0, {c0: 4096})]
    buf106.unmet_dependencies = [MemoryDep('buf102', c0, {c0: 2097152}), MemoryDep('buf105', c0, {c0: 2097152})]
    buf106.met_dependencies = [MemoryDep('arg58_1', c1, {c0: 4096, c1: 512})]
    buf106.users = [NodeUser(node=SchedulerNode(name='buf109'), can_inplace=False, is_weak=False)]
    buf106.group.device = cuda:0
    buf106.group.iteration = (4096, 512)
    buf106.sizes = ([4096], [512])
    class buf106_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf105', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg58_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf102', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf106', get_index_3, getitem)
            return store_reduction
    buf106_buf107_buf109.snodes[1] =
    buf107: SchedulerNode(ComputedBuffer)
    buf107.writes = [MemoryDep('buf107', c0, {c0: 4096})]
    buf107.unmet_dependencies = [MemoryDep('buf102', c0, {c0: 2097152}), MemoryDep('buf105', c0, {c0: 2097152})]
    buf107.met_dependencies = [MemoryDep('arg58_1', c1, {c0: 4096, c1: 512})]
    buf107.users = [NodeUser(node=SchedulerNode(name='buf109'), can_inplace=False, is_weak=False)]
    buf107.group.device = cuda:0
    buf107.group.iteration = (4096, 512)
    buf107.sizes = ([4096], [512])
    class buf107_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf105', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg58_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf102', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf107', get_index_3, getitem_1)
            return store_reduction
    buf106_buf107_buf109.snodes[2] =
    buf109: SchedulerNode(ComputedBuffer)
    buf109.writes = [MemoryDep('buf109', c0, {c0: 2097152})]
    buf109.unmet_dependencies = 
        [   MemoryDep('buf102', c0, {c0: 2097152}),
            MemoryDep('buf105', c0, {c0: 2097152}),
            MemoryDep('buf106', c0, {c0: 4096}),
            MemoryDep('buf107', c0, {c0: 4096})]
    buf109.met_dependencies = 
        [   MemoryDep('arg58_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg59_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg60_1', c1, {c0: 4096, c1: 512})]
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf110'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf121'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf122'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf123'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf124'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf109.group.device = cuda:0
    buf109.group.iteration = (2097152, 1)
    buf109.sizes = ([4096, 512], [])
    class buf109_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf105', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg58_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf102', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf106', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf107', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg59_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg60_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf109', get_index_7, to_dtype_3, None)
            return store


buf110: ExternKernelSchedulerNode(ExternKernelOut)
buf110.writes = [StarDep(name='buf110')]
buf110.unmet_dependencies = [StarDep(name='buf109')]
buf110.met_dependencies = [StarDep(name='arg61_1')]
buf110.users = [NodeUser(node=SchedulerNode(name='buf111'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf112'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf113'), can_inplace=False, is_weak=False)]
buf110.node.kernel = extern_kernels.mm


buf111: SchedulerNode(ComputedBuffer)
buf111.writes = [MemoryDep('buf111', c0, {c0: 2097152})]
buf111.unmet_dependencies = [MemoryDep('buf110', 1536*c0 + c1, {c0: 4096, c1: 512})]
buf111.met_dependencies = [MemoryDep('arg62_1', c1, {c0: 4096, c1: 512})]
buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf114'), can_inplace=False, is_weak=False)]
buf111.group.device = cuda:0
buf111.group.iteration = (2097152, 1)
buf111.sizes = ([4096, 512], [])
class buf111_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf111', get_index_2, add, None)
        return store


buf112: SchedulerNode(ComputedBuffer)
buf112.writes = [MemoryDep('buf112', c0, {c0: 2097152})]
buf112.unmet_dependencies = [MemoryDep('buf110', 1536*c0 + c1 + 512, {c0: 4096, c1: 512})]
buf112.met_dependencies = [MemoryDep('arg62_1', c1 + 512, {c0: 4096, c1: 512})]
buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf114'), can_inplace=False, is_weak=False)]
buf112.group.device = cuda:0
buf112.group.iteration = (2097152, 1)
buf112.sizes = ([4096, 512], [])
class buf112_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 512
    index1 = z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf112', get_index_2, add, None)
        return store


buf113: SchedulerNode(ComputedBuffer)
buf113.writes = [MemoryDep('buf113', c0, {c0: 2097152})]
buf113.unmet_dependencies = [MemoryDep('buf110', 1536*c0 + c1 + 1024, {c0: 4096, c1: 512})]
buf113.met_dependencies = [MemoryDep('arg62_1', c1 + 1024, {c0: 4096, c1: 512})]
buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf114'), can_inplace=False, is_weak=False)]
buf113.group.device = cuda:0
buf113.group.iteration = (2097152, 1)
buf113.sizes = ([4096, 512], [])
class buf113_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 1024
    index1 = z1 + 1024
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf113', get_index_2, add, None)
        return store


buf114: ExternKernelSchedulerNode(FallbackKernel)
buf114.writes = [StarDep(name='buf114')]
buf114.unmet_dependencies = [StarDep(name='buf111'), StarDep(name='buf112'), StarDep(name='buf113')]
buf114.met_dependencies = []
buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf115'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf116'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf117'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf118'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf119'), can_inplace=False, is_weak=False)]
buf114.node.kernel = None


buf115: ExternKernelSchedulerNode(MultiOutput)
buf115.writes = [StarDep(name='buf115')]
buf115.unmet_dependencies = [StarDep(name='buf114')]
buf115.met_dependencies = []
buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf120'), can_inplace=False, is_weak=False)]
buf115.node.kernel = None


buf120: ExternKernelSchedulerNode(ExternKernelOut)
buf120.writes = [StarDep(name='buf120')]
buf120.unmet_dependencies = [StarDep(name='buf115')]
buf120.met_dependencies = [StarDep(name='arg63_1')]
buf120.users = [NodeUser(node=SchedulerNode(name='buf121'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf122'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf123'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf124'), can_inplace=True, is_weak=False)]
buf120.node.kernel = extern_kernels.mm


buf121_buf122_buf124: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf121_buf122_buf124.writes = 
    [   MemoryDep('buf121', c0, {c0: 4096}),
        MemoryDep('buf122', c0, {c0: 4096}),
        MemoryDep('buf124', c0, {c0: 2097152})]
buf121_buf122_buf124.unmet_dependencies = [MemoryDep('buf109', c0, {c0: 2097152}), MemoryDep('buf120', c0, {c0: 2097152})]
buf121_buf122_buf124.met_dependencies = 
    [   MemoryDep('arg64_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg65_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg66_1', c1, {c0: 4096, c1: 512})]
buf121_buf122_buf124.users = []
    buf121_buf122_buf124.snodes[0] =
    buf121: SchedulerNode(ComputedBuffer)
    buf121.writes = [MemoryDep('buf121', c0, {c0: 4096})]
    buf121.unmet_dependencies = [MemoryDep('buf109', c0, {c0: 2097152}), MemoryDep('buf120', c0, {c0: 2097152})]
    buf121.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 4096, c1: 512})]
    buf121.users = [NodeUser(node=SchedulerNode(name='buf124'), can_inplace=False, is_weak=False)]
    buf121.group.device = cuda:0
    buf121.group.iteration = (4096, 512)
    buf121.sizes = ([4096], [512])
    class buf121_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf120', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg64_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf109', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf121', get_index_3, getitem)
            return store_reduction
    buf121_buf122_buf124.snodes[1] =
    buf122: SchedulerNode(ComputedBuffer)
    buf122.writes = [MemoryDep('buf122', c0, {c0: 4096})]
    buf122.unmet_dependencies = [MemoryDep('buf109', c0, {c0: 2097152}), MemoryDep('buf120', c0, {c0: 2097152})]
    buf122.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 4096, c1: 512})]
    buf122.users = [NodeUser(node=SchedulerNode(name='buf124'), can_inplace=False, is_weak=False)]
    buf122.group.device = cuda:0
    buf122.group.iteration = (4096, 512)
    buf122.sizes = ([4096], [512])
    class buf122_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf120', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg64_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf109', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf122', get_index_3, getitem_1)
            return store_reduction
    buf121_buf122_buf124.snodes[2] =
    buf124: SchedulerNode(ComputedBuffer)
    buf124.writes = [MemoryDep('buf124', c0, {c0: 2097152})]
    buf124.unmet_dependencies = 
        [   MemoryDep('buf109', c0, {c0: 2097152}),
            MemoryDep('buf120', c0, {c0: 2097152}),
            MemoryDep('buf121', c0, {c0: 4096}),
            MemoryDep('buf122', c0, {c0: 4096})]
    buf124.met_dependencies = 
        [   MemoryDep('arg64_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg65_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg66_1', c1, {c0: 4096, c1: 512})]
    buf124.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf125'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf128'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf129'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf130'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf131'), can_inplace=True, is_weak=False)]
    buf124.group.device = cuda:0
    buf124.group.iteration = (2097152, 1)
    buf124.sizes = ([4096, 512], [])
    class buf124_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf120', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg64_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf109', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf121', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf122', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg65_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg66_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf124', get_index_7, to_dtype_3, None)
            return store


buf125: ExternKernelSchedulerNode(ExternKernelOut)
buf125.writes = [StarDep(name='buf125')]
buf125.unmet_dependencies = [StarDep(name='buf124')]
buf125.met_dependencies = [StarDep(name='arg67_1')]
buf125.users = [NodeUser(node=SchedulerNode(name='buf126'), can_inplace=True, is_weak=False)]
buf125.node.kernel = extern_kernels.mm


buf126: SchedulerNode(ComputedBuffer)
buf126.writes = [MemoryDep('buf126', c0, {c0: 8388608})]
buf126.unmet_dependencies = [MemoryDep('buf125', c0, {c0: 8388608})]
buf126.met_dependencies = [MemoryDep('arg68_1', c1, {c0: 4096, c1: 2048})]
buf126.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf127'), can_inplace=False, is_weak=False)]
buf126.group.device = cuda:0
buf126.group.iteration = (8388608, 1)
buf126.sizes = ([4096, 2048], [])
class buf126_loop_body:
    var_ranges = {z0: 4096, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg68_1', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf125', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg68_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf126', get_index_4, to_dtype_2, None)
        return store


buf127: ExternKernelSchedulerNode(ExternKernelOut)
buf127.writes = [StarDep(name='buf127')]
buf127.unmet_dependencies = [StarDep(name='buf126')]
buf127.met_dependencies = [StarDep(name='arg69_1')]
buf127.users = [NodeUser(node=SchedulerNode(name='buf128'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf129'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf130'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf131'), can_inplace=True, is_weak=False)]
buf127.node.kernel = extern_kernels.mm


buf128_buf129_buf131: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf128_buf129_buf131.writes = 
    [   MemoryDep('buf128', c0, {c0: 4096}),
        MemoryDep('buf129', c0, {c0: 4096}),
        MemoryDep('buf131', c0, {c0: 2097152})]
buf128_buf129_buf131.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 2097152}), MemoryDep('buf127', c0, {c0: 2097152})]
buf128_buf129_buf131.met_dependencies = 
    [   MemoryDep('arg70_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg71_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg72_1', c1, {c0: 4096, c1: 512})]
buf128_buf129_buf131.users = []
    buf128_buf129_buf131.snodes[0] =
    buf128: SchedulerNode(ComputedBuffer)
    buf128.writes = [MemoryDep('buf128', c0, {c0: 4096})]
    buf128.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 2097152}), MemoryDep('buf127', c0, {c0: 2097152})]
    buf128.met_dependencies = [MemoryDep('arg70_1', c1, {c0: 4096, c1: 512})]
    buf128.users = [NodeUser(node=SchedulerNode(name='buf131'), can_inplace=False, is_weak=False)]
    buf128.group.device = cuda:0
    buf128.group.iteration = (4096, 512)
    buf128.sizes = ([4096], [512])
    class buf128_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf127', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg70_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf124', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf128', get_index_3, getitem)
            return store_reduction
    buf128_buf129_buf131.snodes[1] =
    buf129: SchedulerNode(ComputedBuffer)
    buf129.writes = [MemoryDep('buf129', c0, {c0: 4096})]
    buf129.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 2097152}), MemoryDep('buf127', c0, {c0: 2097152})]
    buf129.met_dependencies = [MemoryDep('arg70_1', c1, {c0: 4096, c1: 512})]
    buf129.users = [NodeUser(node=SchedulerNode(name='buf131'), can_inplace=False, is_weak=False)]
    buf129.group.device = cuda:0
    buf129.group.iteration = (4096, 512)
    buf129.sizes = ([4096], [512])
    class buf129_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf127', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg70_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf124', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf129', get_index_3, getitem_1)
            return store_reduction
    buf128_buf129_buf131.snodes[2] =
    buf131: SchedulerNode(ComputedBuffer)
    buf131.writes = [MemoryDep('buf131', c0, {c0: 2097152})]
    buf131.unmet_dependencies = 
        [   MemoryDep('buf124', c0, {c0: 2097152}),
            MemoryDep('buf127', c0, {c0: 2097152}),
            MemoryDep('buf128', c0, {c0: 4096}),
            MemoryDep('buf129', c0, {c0: 4096})]
    buf131.met_dependencies = 
        [   MemoryDep('arg70_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg71_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg72_1', c1, {c0: 4096, c1: 512})]
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf132'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf143'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf144'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf145'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf146'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf131.group.device = cuda:0
    buf131.group.iteration = (2097152, 1)
    buf131.sizes = ([4096, 512], [])
    class buf131_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf127', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg70_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf124', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf128', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf129', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg71_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg72_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf131', get_index_7, to_dtype_3, None)
            return store


buf132: ExternKernelSchedulerNode(ExternKernelOut)
buf132.writes = [StarDep(name='buf132')]
buf132.unmet_dependencies = [StarDep(name='buf131')]
buf132.met_dependencies = [StarDep(name='arg73_1')]
buf132.users = [NodeUser(node=SchedulerNode(name='buf133'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf134'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf135'), can_inplace=False, is_weak=False)]
buf132.node.kernel = extern_kernels.mm


buf133: SchedulerNode(ComputedBuffer)
buf133.writes = [MemoryDep('buf133', c0, {c0: 2097152})]
buf133.unmet_dependencies = [MemoryDep('buf132', 1536*c0 + c1, {c0: 4096, c1: 512})]
buf133.met_dependencies = [MemoryDep('arg74_1', c1, {c0: 4096, c1: 512})]
buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf136'), can_inplace=False, is_weak=False)]
buf133.group.device = cuda:0
buf133.group.iteration = (2097152, 1)
buf133.sizes = ([4096, 512], [])
class buf133_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf133', get_index_2, add, None)
        return store


buf134: SchedulerNode(ComputedBuffer)
buf134.writes = [MemoryDep('buf134', c0, {c0: 2097152})]
buf134.unmet_dependencies = [MemoryDep('buf132', 1536*c0 + c1 + 512, {c0: 4096, c1: 512})]
buf134.met_dependencies = [MemoryDep('arg74_1', c1 + 512, {c0: 4096, c1: 512})]
buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf136'), can_inplace=False, is_weak=False)]
buf134.group.device = cuda:0
buf134.group.iteration = (2097152, 1)
buf134.sizes = ([4096, 512], [])
class buf134_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 512
    index1 = z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf134', get_index_2, add, None)
        return store


buf135: SchedulerNode(ComputedBuffer)
buf135.writes = [MemoryDep('buf135', c0, {c0: 2097152})]
buf135.unmet_dependencies = [MemoryDep('buf132', 1536*c0 + c1 + 1024, {c0: 4096, c1: 512})]
buf135.met_dependencies = [MemoryDep('arg74_1', c1 + 1024, {c0: 4096, c1: 512})]
buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf136'), can_inplace=False, is_weak=False)]
buf135.group.device = cuda:0
buf135.group.iteration = (2097152, 1)
buf135.sizes = ([4096, 512], [])
class buf135_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 1024
    index1 = z1 + 1024
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf135', get_index_2, add, None)
        return store


buf136: ExternKernelSchedulerNode(FallbackKernel)
buf136.writes = [StarDep(name='buf136')]
buf136.unmet_dependencies = [StarDep(name='buf133'), StarDep(name='buf134'), StarDep(name='buf135')]
buf136.met_dependencies = []
buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf137'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf138'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf139'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf140'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf141'), can_inplace=False, is_weak=False)]
buf136.node.kernel = None


buf137: ExternKernelSchedulerNode(MultiOutput)
buf137.writes = [StarDep(name='buf137')]
buf137.unmet_dependencies = [StarDep(name='buf136')]
buf137.met_dependencies = []
buf137.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf142'), can_inplace=False, is_weak=False)]
buf137.node.kernel = None


buf142: ExternKernelSchedulerNode(ExternKernelOut)
buf142.writes = [StarDep(name='buf142')]
buf142.unmet_dependencies = [StarDep(name='buf137')]
buf142.met_dependencies = [StarDep(name='arg75_1')]
buf142.users = [NodeUser(node=SchedulerNode(name='buf143'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf144'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf145'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf146'), can_inplace=True, is_weak=False)]
buf142.node.kernel = extern_kernels.mm


buf143_buf144_buf146: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf143_buf144_buf146.writes = 
    [   MemoryDep('buf143', c0, {c0: 4096}),
        MemoryDep('buf144', c0, {c0: 4096}),
        MemoryDep('buf146', c0, {c0: 2097152})]
buf143_buf144_buf146.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 2097152}), MemoryDep('buf142', c0, {c0: 2097152})]
buf143_buf144_buf146.met_dependencies = 
    [   MemoryDep('arg76_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg77_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg78_1', c1, {c0: 4096, c1: 512})]
buf143_buf144_buf146.users = []
    buf143_buf144_buf146.snodes[0] =
    buf143: SchedulerNode(ComputedBuffer)
    buf143.writes = [MemoryDep('buf143', c0, {c0: 4096})]
    buf143.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 2097152}), MemoryDep('buf142', c0, {c0: 2097152})]
    buf143.met_dependencies = [MemoryDep('arg76_1', c1, {c0: 4096, c1: 512})]
    buf143.users = [NodeUser(node=SchedulerNode(name='buf146'), can_inplace=False, is_weak=False)]
    buf143.group.device = cuda:0
    buf143.group.iteration = (4096, 512)
    buf143.sizes = ([4096], [512])
    class buf143_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf142', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg76_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf131', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf143', get_index_3, getitem)
            return store_reduction
    buf143_buf144_buf146.snodes[1] =
    buf144: SchedulerNode(ComputedBuffer)
    buf144.writes = [MemoryDep('buf144', c0, {c0: 4096})]
    buf144.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 2097152}), MemoryDep('buf142', c0, {c0: 2097152})]
    buf144.met_dependencies = [MemoryDep('arg76_1', c1, {c0: 4096, c1: 512})]
    buf144.users = [NodeUser(node=SchedulerNode(name='buf146'), can_inplace=False, is_weak=False)]
    buf144.group.device = cuda:0
    buf144.group.iteration = (4096, 512)
    buf144.sizes = ([4096], [512])
    class buf144_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf142', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg76_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf131', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf144', get_index_3, getitem_1)
            return store_reduction
    buf143_buf144_buf146.snodes[2] =
    buf146: SchedulerNode(ComputedBuffer)
    buf146.writes = [MemoryDep('buf146', c0, {c0: 2097152})]
    buf146.unmet_dependencies = 
        [   MemoryDep('buf131', c0, {c0: 2097152}),
            MemoryDep('buf142', c0, {c0: 2097152}),
            MemoryDep('buf143', c0, {c0: 4096}),
            MemoryDep('buf144', c0, {c0: 4096})]
    buf146.met_dependencies = 
        [   MemoryDep('arg76_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg77_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg78_1', c1, {c0: 4096, c1: 512})]
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf147'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf150'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf151'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf152'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf153'), can_inplace=True, is_weak=False)]
    buf146.group.device = cuda:0
    buf146.group.iteration = (2097152, 1)
    buf146.sizes = ([4096, 512], [])
    class buf146_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf142', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg76_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf131', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf143', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf144', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg77_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg78_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf146', get_index_7, to_dtype_3, None)
            return store


buf147: ExternKernelSchedulerNode(ExternKernelOut)
buf147.writes = [StarDep(name='buf147')]
buf147.unmet_dependencies = [StarDep(name='buf146')]
buf147.met_dependencies = [StarDep(name='arg79_1')]
buf147.users = [NodeUser(node=SchedulerNode(name='buf148'), can_inplace=True, is_weak=False)]
buf147.node.kernel = extern_kernels.mm


buf148: SchedulerNode(ComputedBuffer)
buf148.writes = [MemoryDep('buf148', c0, {c0: 8388608})]
buf148.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 8388608})]
buf148.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 4096, c1: 2048})]
buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf149'), can_inplace=False, is_weak=False)]
buf148.group.device = cuda:0
buf148.group.iteration = (8388608, 1)
buf148.sizes = ([4096, 2048], [])
class buf148_loop_body:
    var_ranges = {z0: 4096, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg80_1', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf147', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg80_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf148', get_index_4, to_dtype_2, None)
        return store


buf149: ExternKernelSchedulerNode(ExternKernelOut)
buf149.writes = [StarDep(name='buf149')]
buf149.unmet_dependencies = [StarDep(name='buf148')]
buf149.met_dependencies = [StarDep(name='arg81_1')]
buf149.users = [NodeUser(node=SchedulerNode(name='buf150'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf151'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf152'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf153'), can_inplace=True, is_weak=False)]
buf149.node.kernel = extern_kernels.mm


buf150_buf151_buf153: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf150_buf151_buf153.writes = 
    [   MemoryDep('buf150', c0, {c0: 4096}),
        MemoryDep('buf151', c0, {c0: 4096}),
        MemoryDep('buf153', c0, {c0: 2097152})]
buf150_buf151_buf153.unmet_dependencies = [MemoryDep('buf146', c0, {c0: 2097152}), MemoryDep('buf149', c0, {c0: 2097152})]
buf150_buf151_buf153.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg83_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg84_1', c1, {c0: 4096, c1: 512})]
buf150_buf151_buf153.users = []
    buf150_buf151_buf153.snodes[0] =
    buf150: SchedulerNode(ComputedBuffer)
    buf150.writes = [MemoryDep('buf150', c0, {c0: 4096})]
    buf150.unmet_dependencies = [MemoryDep('buf146', c0, {c0: 2097152}), MemoryDep('buf149', c0, {c0: 2097152})]
    buf150.met_dependencies = [MemoryDep('arg82_1', c1, {c0: 4096, c1: 512})]
    buf150.users = [NodeUser(node=SchedulerNode(name='buf153'), can_inplace=False, is_weak=False)]
    buf150.group.device = cuda:0
    buf150.group.iteration = (4096, 512)
    buf150.sizes = ([4096], [512])
    class buf150_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf149', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg82_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf146', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf150', get_index_3, getitem)
            return store_reduction
    buf150_buf151_buf153.snodes[1] =
    buf151: SchedulerNode(ComputedBuffer)
    buf151.writes = [MemoryDep('buf151', c0, {c0: 4096})]
    buf151.unmet_dependencies = [MemoryDep('buf146', c0, {c0: 2097152}), MemoryDep('buf149', c0, {c0: 2097152})]
    buf151.met_dependencies = [MemoryDep('arg82_1', c1, {c0: 4096, c1: 512})]
    buf151.users = [NodeUser(node=SchedulerNode(name='buf153'), can_inplace=False, is_weak=False)]
    buf151.group.device = cuda:0
    buf151.group.iteration = (4096, 512)
    buf151.sizes = ([4096], [512])
    class buf151_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf149', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg82_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf146', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf151', get_index_3, getitem_1)
            return store_reduction
    buf150_buf151_buf153.snodes[2] =
    buf153: SchedulerNode(ComputedBuffer)
    buf153.writes = [MemoryDep('buf153', c0, {c0: 2097152})]
    buf153.unmet_dependencies = 
        [   MemoryDep('buf146', c0, {c0: 2097152}),
            MemoryDep('buf149', c0, {c0: 2097152}),
            MemoryDep('buf150', c0, {c0: 4096}),
            MemoryDep('buf151', c0, {c0: 4096})]
    buf153.met_dependencies = 
        [   MemoryDep('arg82_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg83_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg84_1', c1, {c0: 4096, c1: 512})]
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf154'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf165'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf166'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf167'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf168'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf153.group.device = cuda:0
    buf153.group.iteration = (2097152, 1)
    buf153.sizes = ([4096, 512], [])
    class buf153_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf149', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg82_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf146', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf150', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf151', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg83_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg84_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf153', get_index_7, to_dtype_3, None)
            return store


buf154: ExternKernelSchedulerNode(ExternKernelOut)
buf154.writes = [StarDep(name='buf154')]
buf154.unmet_dependencies = [StarDep(name='buf153')]
buf154.met_dependencies = [StarDep(name='arg85_1')]
buf154.users = [NodeUser(node=SchedulerNode(name='buf155'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf156'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf157'), can_inplace=False, is_weak=False)]
buf154.node.kernel = extern_kernels.mm


buf155: SchedulerNode(ComputedBuffer)
buf155.writes = [MemoryDep('buf155', c0, {c0: 2097152})]
buf155.unmet_dependencies = [MemoryDep('buf154', 1536*c0 + c1, {c0: 4096, c1: 512})]
buf155.met_dependencies = [MemoryDep('arg86_1', c1, {c0: 4096, c1: 512})]
buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf158'), can_inplace=False, is_weak=False)]
buf155.group.device = cuda:0
buf155.group.iteration = (2097152, 1)
buf155.sizes = ([4096, 512], [])
class buf155_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf155', get_index_2, add, None)
        return store


buf156: SchedulerNode(ComputedBuffer)
buf156.writes = [MemoryDep('buf156', c0, {c0: 2097152})]
buf156.unmet_dependencies = [MemoryDep('buf154', 1536*c0 + c1 + 512, {c0: 4096, c1: 512})]
buf156.met_dependencies = [MemoryDep('arg86_1', c1 + 512, {c0: 4096, c1: 512})]
buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf158'), can_inplace=False, is_weak=False)]
buf156.group.device = cuda:0
buf156.group.iteration = (2097152, 1)
buf156.sizes = ([4096, 512], [])
class buf156_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 512
    index1 = z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf156', get_index_2, add, None)
        return store


buf157: SchedulerNode(ComputedBuffer)
buf157.writes = [MemoryDep('buf157', c0, {c0: 2097152})]
buf157.unmet_dependencies = [MemoryDep('buf154', 1536*c0 + c1 + 1024, {c0: 4096, c1: 512})]
buf157.met_dependencies = [MemoryDep('arg86_1', c1 + 1024, {c0: 4096, c1: 512})]
buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf158'), can_inplace=False, is_weak=False)]
buf157.group.device = cuda:0
buf157.group.iteration = (2097152, 1)
buf157.sizes = ([4096, 512], [])
class buf157_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 1024
    index1 = z1 + 1024
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf157', get_index_2, add, None)
        return store


buf158: ExternKernelSchedulerNode(FallbackKernel)
buf158.writes = [StarDep(name='buf158')]
buf158.unmet_dependencies = [StarDep(name='buf155'), StarDep(name='buf156'), StarDep(name='buf157')]
buf158.met_dependencies = []
buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf159'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf160'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf161'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf162'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf163'), can_inplace=False, is_weak=False)]
buf158.node.kernel = None


buf159: ExternKernelSchedulerNode(MultiOutput)
buf159.writes = [StarDep(name='buf159')]
buf159.unmet_dependencies = [StarDep(name='buf158')]
buf159.met_dependencies = []
buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf164'), can_inplace=False, is_weak=False)]
buf159.node.kernel = None


buf164: ExternKernelSchedulerNode(ExternKernelOut)
buf164.writes = [StarDep(name='buf164')]
buf164.unmet_dependencies = [StarDep(name='buf159')]
buf164.met_dependencies = [StarDep(name='arg87_1')]
buf164.users = [NodeUser(node=SchedulerNode(name='buf165'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf166'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf167'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf168'), can_inplace=True, is_weak=False)]
buf164.node.kernel = extern_kernels.mm


buf165_buf166_buf168: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf165_buf166_buf168.writes = 
    [   MemoryDep('buf165', c0, {c0: 4096}),
        MemoryDep('buf166', c0, {c0: 4096}),
        MemoryDep('buf168', c0, {c0: 2097152})]
buf165_buf166_buf168.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 2097152}), MemoryDep('buf164', c0, {c0: 2097152})]
buf165_buf166_buf168.met_dependencies = 
    [   MemoryDep('arg88_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg89_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg90_1', c1, {c0: 4096, c1: 512})]
buf165_buf166_buf168.users = []
    buf165_buf166_buf168.snodes[0] =
    buf165: SchedulerNode(ComputedBuffer)
    buf165.writes = [MemoryDep('buf165', c0, {c0: 4096})]
    buf165.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 2097152}), MemoryDep('buf164', c0, {c0: 2097152})]
    buf165.met_dependencies = [MemoryDep('arg88_1', c1, {c0: 4096, c1: 512})]
    buf165.users = [NodeUser(node=SchedulerNode(name='buf168'), can_inplace=False, is_weak=False)]
    buf165.group.device = cuda:0
    buf165.group.iteration = (4096, 512)
    buf165.sizes = ([4096], [512])
    class buf165_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf164', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg88_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf153', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf165', get_index_3, getitem)
            return store_reduction
    buf165_buf166_buf168.snodes[1] =
    buf166: SchedulerNode(ComputedBuffer)
    buf166.writes = [MemoryDep('buf166', c0, {c0: 4096})]
    buf166.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 2097152}), MemoryDep('buf164', c0, {c0: 2097152})]
    buf166.met_dependencies = [MemoryDep('arg88_1', c1, {c0: 4096, c1: 512})]
    buf166.users = [NodeUser(node=SchedulerNode(name='buf168'), can_inplace=False, is_weak=False)]
    buf166.group.device = cuda:0
    buf166.group.iteration = (4096, 512)
    buf166.sizes = ([4096], [512])
    class buf166_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf164', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg88_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf153', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf166', get_index_3, getitem_1)
            return store_reduction
    buf165_buf166_buf168.snodes[2] =
    buf168: SchedulerNode(ComputedBuffer)
    buf168.writes = [MemoryDep('buf168', c0, {c0: 2097152})]
    buf168.unmet_dependencies = 
        [   MemoryDep('buf153', c0, {c0: 2097152}),
            MemoryDep('buf164', c0, {c0: 2097152}),
            MemoryDep('buf165', c0, {c0: 4096}),
            MemoryDep('buf166', c0, {c0: 4096})]
    buf168.met_dependencies = 
        [   MemoryDep('arg88_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg89_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg90_1', c1, {c0: 4096, c1: 512})]
    buf168.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf169'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf172'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf173'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf174'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf175'), can_inplace=True, is_weak=False)]
    buf168.group.device = cuda:0
    buf168.group.iteration = (2097152, 1)
    buf168.sizes = ([4096, 512], [])
    class buf168_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf164', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg88_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf153', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf165', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf166', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg89_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg90_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf168', get_index_7, to_dtype_3, None)
            return store


buf169: ExternKernelSchedulerNode(ExternKernelOut)
buf169.writes = [StarDep(name='buf169')]
buf169.unmet_dependencies = [StarDep(name='buf168')]
buf169.met_dependencies = [StarDep(name='arg91_1')]
buf169.users = [NodeUser(node=SchedulerNode(name='buf170'), can_inplace=True, is_weak=False)]
buf169.node.kernel = extern_kernels.mm


buf170: SchedulerNode(ComputedBuffer)
buf170.writes = [MemoryDep('buf170', c0, {c0: 8388608})]
buf170.unmet_dependencies = [MemoryDep('buf169', c0, {c0: 8388608})]
buf170.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 4096, c1: 2048})]
buf170.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf171'), can_inplace=False, is_weak=False)]
buf170.group.device = cuda:0
buf170.group.iteration = (8388608, 1)
buf170.sizes = ([4096, 2048], [])
class buf170_loop_body:
    var_ranges = {z0: 4096, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg92_1', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf169', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg92_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf170', get_index_4, to_dtype_2, None)
        return store


buf171: ExternKernelSchedulerNode(ExternKernelOut)
buf171.writes = [StarDep(name='buf171')]
buf171.unmet_dependencies = [StarDep(name='buf170')]
buf171.met_dependencies = [StarDep(name='arg93_1')]
buf171.users = [NodeUser(node=SchedulerNode(name='buf172'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf173'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf174'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf175'), can_inplace=True, is_weak=False)]
buf171.node.kernel = extern_kernels.mm


buf172_buf173_buf175: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf172_buf173_buf175.writes = 
    [   MemoryDep('buf172', c0, {c0: 4096}),
        MemoryDep('buf173', c0, {c0: 4096}),
        MemoryDep('buf175', c0, {c0: 2097152})]
buf172_buf173_buf175.unmet_dependencies = [MemoryDep('buf168', c0, {c0: 2097152}), MemoryDep('buf171', c0, {c0: 2097152})]
buf172_buf173_buf175.met_dependencies = 
    [   MemoryDep('arg94_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg95_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg96_1', c1, {c0: 4096, c1: 512})]
buf172_buf173_buf175.users = []
    buf172_buf173_buf175.snodes[0] =
    buf172: SchedulerNode(ComputedBuffer)
    buf172.writes = [MemoryDep('buf172', c0, {c0: 4096})]
    buf172.unmet_dependencies = [MemoryDep('buf168', c0, {c0: 2097152}), MemoryDep('buf171', c0, {c0: 2097152})]
    buf172.met_dependencies = [MemoryDep('arg94_1', c1, {c0: 4096, c1: 512})]
    buf172.users = [NodeUser(node=SchedulerNode(name='buf175'), can_inplace=False, is_weak=False)]
    buf172.group.device = cuda:0
    buf172.group.iteration = (4096, 512)
    buf172.sizes = ([4096], [512])
    class buf172_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf171', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg94_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf168', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf172', get_index_3, getitem)
            return store_reduction
    buf172_buf173_buf175.snodes[1] =
    buf173: SchedulerNode(ComputedBuffer)
    buf173.writes = [MemoryDep('buf173', c0, {c0: 4096})]
    buf173.unmet_dependencies = [MemoryDep('buf168', c0, {c0: 2097152}), MemoryDep('buf171', c0, {c0: 2097152})]
    buf173.met_dependencies = [MemoryDep('arg94_1', c1, {c0: 4096, c1: 512})]
    buf173.users = [NodeUser(node=SchedulerNode(name='buf175'), can_inplace=False, is_weak=False)]
    buf173.group.device = cuda:0
    buf173.group.iteration = (4096, 512)
    buf173.sizes = ([4096], [512])
    class buf173_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf171', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg94_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf168', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf173', get_index_3, getitem_1)
            return store_reduction
    buf172_buf173_buf175.snodes[2] =
    buf175: SchedulerNode(ComputedBuffer)
    buf175.writes = [MemoryDep('buf175', c0, {c0: 2097152})]
    buf175.unmet_dependencies = 
        [   MemoryDep('buf168', c0, {c0: 2097152}),
            MemoryDep('buf171', c0, {c0: 2097152}),
            MemoryDep('buf172', c0, {c0: 4096}),
            MemoryDep('buf173', c0, {c0: 4096})]
    buf175.met_dependencies = 
        [   MemoryDep('arg94_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg95_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg96_1', c1, {c0: 4096, c1: 512})]
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf176'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf187'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf188'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf189'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf190'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf175.group.device = cuda:0
    buf175.group.iteration = (2097152, 1)
    buf175.sizes = ([4096, 512], [])
    class buf175_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf171', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg94_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf168', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf172', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf173', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg95_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg96_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf175', get_index_7, to_dtype_3, None)
            return store


buf176: ExternKernelSchedulerNode(ExternKernelOut)
buf176.writes = [StarDep(name='buf176')]
buf176.unmet_dependencies = [StarDep(name='buf175')]
buf176.met_dependencies = [StarDep(name='arg97_1')]
buf176.users = [NodeUser(node=SchedulerNode(name='buf177'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf178'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf179'), can_inplace=False, is_weak=False)]
buf176.node.kernel = extern_kernels.mm


buf177: SchedulerNode(ComputedBuffer)
buf177.writes = [MemoryDep('buf177', c0, {c0: 2097152})]
buf177.unmet_dependencies = [MemoryDep('buf176', 1536*c0 + c1, {c0: 4096, c1: 512})]
buf177.met_dependencies = [MemoryDep('arg98_1', c1, {c0: 4096, c1: 512})]
buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf180'), can_inplace=False, is_weak=False)]
buf177.group.device = cuda:0
buf177.group.iteration = (2097152, 1)
buf177.sizes = ([4096, 512], [])
class buf177_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg98_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf177', get_index_2, add, None)
        return store


buf178: SchedulerNode(ComputedBuffer)
buf178.writes = [MemoryDep('buf178', c0, {c0: 2097152})]
buf178.unmet_dependencies = [MemoryDep('buf176', 1536*c0 + c1 + 512, {c0: 4096, c1: 512})]
buf178.met_dependencies = [MemoryDep('arg98_1', c1 + 512, {c0: 4096, c1: 512})]
buf178.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf180'), can_inplace=False, is_weak=False)]
buf178.group.device = cuda:0
buf178.group.iteration = (2097152, 1)
buf178.sizes = ([4096, 512], [])
class buf178_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 512
    index1 = z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg98_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf178', get_index_2, add, None)
        return store


buf179: SchedulerNode(ComputedBuffer)
buf179.writes = [MemoryDep('buf179', c0, {c0: 2097152})]
buf179.unmet_dependencies = [MemoryDep('buf176', 1536*c0 + c1 + 1024, {c0: 4096, c1: 512})]
buf179.met_dependencies = [MemoryDep('arg98_1', c1 + 1024, {c0: 4096, c1: 512})]
buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf180'), can_inplace=False, is_weak=False)]
buf179.group.device = cuda:0
buf179.group.iteration = (2097152, 1)
buf179.sizes = ([4096, 512], [])
class buf179_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 1024
    index1 = z1 + 1024
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg98_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf179', get_index_2, add, None)
        return store


buf180: ExternKernelSchedulerNode(FallbackKernel)
buf180.writes = [StarDep(name='buf180')]
buf180.unmet_dependencies = [StarDep(name='buf177'), StarDep(name='buf178'), StarDep(name='buf179')]
buf180.met_dependencies = []
buf180.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf181'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf182'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf183'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf184'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf185'), can_inplace=False, is_weak=False)]
buf180.node.kernel = None


buf181: ExternKernelSchedulerNode(MultiOutput)
buf181.writes = [StarDep(name='buf181')]
buf181.unmet_dependencies = [StarDep(name='buf180')]
buf181.met_dependencies = []
buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf186'), can_inplace=False, is_weak=False)]
buf181.node.kernel = None


buf186: ExternKernelSchedulerNode(ExternKernelOut)
buf186.writes = [StarDep(name='buf186')]
buf186.unmet_dependencies = [StarDep(name='buf181')]
buf186.met_dependencies = [StarDep(name='arg99_1')]
buf186.users = [NodeUser(node=SchedulerNode(name='buf187'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf188'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf189'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf190'), can_inplace=True, is_weak=False)]
buf186.node.kernel = extern_kernels.mm


buf187_buf188_buf190: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf187_buf188_buf190.writes = 
    [   MemoryDep('buf187', c0, {c0: 4096}),
        MemoryDep('buf188', c0, {c0: 4096}),
        MemoryDep('buf190', c0, {c0: 2097152})]
buf187_buf188_buf190.unmet_dependencies = [MemoryDep('buf175', c0, {c0: 2097152}), MemoryDep('buf186', c0, {c0: 2097152})]
buf187_buf188_buf190.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg101_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg102_1', c1, {c0: 4096, c1: 512})]
buf187_buf188_buf190.users = []
    buf187_buf188_buf190.snodes[0] =
    buf187: SchedulerNode(ComputedBuffer)
    buf187.writes = [MemoryDep('buf187', c0, {c0: 4096})]
    buf187.unmet_dependencies = [MemoryDep('buf175', c0, {c0: 2097152}), MemoryDep('buf186', c0, {c0: 2097152})]
    buf187.met_dependencies = [MemoryDep('arg100_1', c1, {c0: 4096, c1: 512})]
    buf187.users = [NodeUser(node=SchedulerNode(name='buf190'), can_inplace=False, is_weak=False)]
    buf187.group.device = cuda:0
    buf187.group.iteration = (4096, 512)
    buf187.sizes = ([4096], [512])
    class buf187_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf186', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg100_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf175', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf187', get_index_3, getitem)
            return store_reduction
    buf187_buf188_buf190.snodes[1] =
    buf188: SchedulerNode(ComputedBuffer)
    buf188.writes = [MemoryDep('buf188', c0, {c0: 4096})]
    buf188.unmet_dependencies = [MemoryDep('buf175', c0, {c0: 2097152}), MemoryDep('buf186', c0, {c0: 2097152})]
    buf188.met_dependencies = [MemoryDep('arg100_1', c1, {c0: 4096, c1: 512})]
    buf188.users = [NodeUser(node=SchedulerNode(name='buf190'), can_inplace=False, is_weak=False)]
    buf188.group.device = cuda:0
    buf188.group.iteration = (4096, 512)
    buf188.sizes = ([4096], [512])
    class buf188_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf186', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg100_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf175', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf188', get_index_3, getitem_1)
            return store_reduction
    buf187_buf188_buf190.snodes[2] =
    buf190: SchedulerNode(ComputedBuffer)
    buf190.writes = [MemoryDep('buf190', c0, {c0: 2097152})]
    buf190.unmet_dependencies = 
        [   MemoryDep('buf175', c0, {c0: 2097152}),
            MemoryDep('buf186', c0, {c0: 2097152}),
            MemoryDep('buf187', c0, {c0: 4096}),
            MemoryDep('buf188', c0, {c0: 4096})]
    buf190.met_dependencies = 
        [   MemoryDep('arg100_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg101_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg102_1', c1, {c0: 4096, c1: 512})]
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf191'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf194'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf195'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf196'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf197'), can_inplace=True, is_weak=False)]
    buf190.group.device = cuda:0
    buf190.group.iteration = (2097152, 1)
    buf190.sizes = ([4096, 512], [])
    class buf190_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf186', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg100_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf175', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf187', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf188', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg101_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg102_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf190', get_index_7, to_dtype_3, None)
            return store


buf191: ExternKernelSchedulerNode(ExternKernelOut)
buf191.writes = [StarDep(name='buf191')]
buf191.unmet_dependencies = [StarDep(name='buf190')]
buf191.met_dependencies = [StarDep(name='arg103_1')]
buf191.users = [NodeUser(node=SchedulerNode(name='buf192'), can_inplace=True, is_weak=False)]
buf191.node.kernel = extern_kernels.mm


buf192: SchedulerNode(ComputedBuffer)
buf192.writes = [MemoryDep('buf192', c0, {c0: 8388608})]
buf192.unmet_dependencies = [MemoryDep('buf191', c0, {c0: 8388608})]
buf192.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 4096, c1: 2048})]
buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf193'), can_inplace=False, is_weak=False)]
buf192.group.device = cuda:0
buf192.group.iteration = (8388608, 1)
buf192.sizes = ([4096, 2048], [])
class buf192_loop_body:
    var_ranges = {z0: 4096, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg104_1', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf191', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg104_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf192', get_index_4, to_dtype_2, None)
        return store


buf193: ExternKernelSchedulerNode(ExternKernelOut)
buf193.writes = [StarDep(name='buf193')]
buf193.unmet_dependencies = [StarDep(name='buf192')]
buf193.met_dependencies = [StarDep(name='arg105_1')]
buf193.users = [NodeUser(node=SchedulerNode(name='buf194'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf195'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf196'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf197'), can_inplace=True, is_weak=False)]
buf193.node.kernel = extern_kernels.mm


buf194_buf195_buf197: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf194_buf195_buf197.writes = 
    [   MemoryDep('buf194', c0, {c0: 4096}),
        MemoryDep('buf195', c0, {c0: 4096}),
        MemoryDep('buf197', c0, {c0: 2097152})]
buf194_buf195_buf197.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 2097152}), MemoryDep('buf193', c0, {c0: 2097152})]
buf194_buf195_buf197.met_dependencies = 
    [   MemoryDep('arg106_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg107_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg108_1', c1, {c0: 4096, c1: 512})]
buf194_buf195_buf197.users = []
    buf194_buf195_buf197.snodes[0] =
    buf194: SchedulerNode(ComputedBuffer)
    buf194.writes = [MemoryDep('buf194', c0, {c0: 4096})]
    buf194.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 2097152}), MemoryDep('buf193', c0, {c0: 2097152})]
    buf194.met_dependencies = [MemoryDep('arg106_1', c1, {c0: 4096, c1: 512})]
    buf194.users = [NodeUser(node=SchedulerNode(name='buf197'), can_inplace=False, is_weak=False)]
    buf194.group.device = cuda:0
    buf194.group.iteration = (4096, 512)
    buf194.sizes = ([4096], [512])
    class buf194_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf193', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg106_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf190', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf194', get_index_3, getitem)
            return store_reduction
    buf194_buf195_buf197.snodes[1] =
    buf195: SchedulerNode(ComputedBuffer)
    buf195.writes = [MemoryDep('buf195', c0, {c0: 4096})]
    buf195.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 2097152}), MemoryDep('buf193', c0, {c0: 2097152})]
    buf195.met_dependencies = [MemoryDep('arg106_1', c1, {c0: 4096, c1: 512})]
    buf195.users = [NodeUser(node=SchedulerNode(name='buf197'), can_inplace=False, is_weak=False)]
    buf195.group.device = cuda:0
    buf195.group.iteration = (4096, 512)
    buf195.sizes = ([4096], [512])
    class buf195_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf193', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg106_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf190', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf195', get_index_3, getitem_1)
            return store_reduction
    buf194_buf195_buf197.snodes[2] =
    buf197: SchedulerNode(ComputedBuffer)
    buf197.writes = [MemoryDep('buf197', c0, {c0: 2097152})]
    buf197.unmet_dependencies = 
        [   MemoryDep('buf190', c0, {c0: 2097152}),
            MemoryDep('buf193', c0, {c0: 2097152}),
            MemoryDep('buf194', c0, {c0: 4096}),
            MemoryDep('buf195', c0, {c0: 4096})]
    buf197.met_dependencies = 
        [   MemoryDep('arg106_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg107_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg108_1', c1, {c0: 4096, c1: 512})]
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf198'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf209'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf210'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf211'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf212'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf197.group.device = cuda:0
    buf197.group.iteration = (2097152, 1)
    buf197.sizes = ([4096, 512], [])
    class buf197_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf193', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg106_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf190', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf194', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf195', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg107_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg108_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf197', get_index_7, to_dtype_3, None)
            return store


buf198: ExternKernelSchedulerNode(ExternKernelOut)
buf198.writes = [StarDep(name='buf198')]
buf198.unmet_dependencies = [StarDep(name='buf197')]
buf198.met_dependencies = [StarDep(name='arg109_1')]
buf198.users = [NodeUser(node=SchedulerNode(name='buf199'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf200'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf201'), can_inplace=False, is_weak=False)]
buf198.node.kernel = extern_kernels.mm


buf199: SchedulerNode(ComputedBuffer)
buf199.writes = [MemoryDep('buf199', c0, {c0: 2097152})]
buf199.unmet_dependencies = [MemoryDep('buf198', 1536*c0 + c1, {c0: 4096, c1: 512})]
buf199.met_dependencies = [MemoryDep('arg110_1', c1, {c0: 4096, c1: 512})]
buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf202'), can_inplace=False, is_weak=False)]
buf199.group.device = cuda:0
buf199.group.iteration = (2097152, 1)
buf199.sizes = ([4096, 512], [])
class buf199_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg110_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf199', get_index_2, add, None)
        return store


buf200: SchedulerNode(ComputedBuffer)
buf200.writes = [MemoryDep('buf200', c0, {c0: 2097152})]
buf200.unmet_dependencies = [MemoryDep('buf198', 1536*c0 + c1 + 512, {c0: 4096, c1: 512})]
buf200.met_dependencies = [MemoryDep('arg110_1', c1 + 512, {c0: 4096, c1: 512})]
buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf202'), can_inplace=False, is_weak=False)]
buf200.group.device = cuda:0
buf200.group.iteration = (2097152, 1)
buf200.sizes = ([4096, 512], [])
class buf200_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 512
    index1 = z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg110_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf200', get_index_2, add, None)
        return store


buf201: SchedulerNode(ComputedBuffer)
buf201.writes = [MemoryDep('buf201', c0, {c0: 2097152})]
buf201.unmet_dependencies = [MemoryDep('buf198', 1536*c0 + c1 + 1024, {c0: 4096, c1: 512})]
buf201.met_dependencies = [MemoryDep('arg110_1', c1 + 1024, {c0: 4096, c1: 512})]
buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf202'), can_inplace=False, is_weak=False)]
buf201.group.device = cuda:0
buf201.group.iteration = (2097152, 1)
buf201.sizes = ([4096, 512], [])
class buf201_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 1024
    index1 = z1 + 1024
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg110_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf201', get_index_2, add, None)
        return store


buf202: ExternKernelSchedulerNode(FallbackKernel)
buf202.writes = [StarDep(name='buf202')]
buf202.unmet_dependencies = [StarDep(name='buf199'), StarDep(name='buf200'), StarDep(name='buf201')]
buf202.met_dependencies = []
buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf203'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf204'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf205'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf206'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf207'), can_inplace=False, is_weak=False)]
buf202.node.kernel = None


buf203: ExternKernelSchedulerNode(MultiOutput)
buf203.writes = [StarDep(name='buf203')]
buf203.unmet_dependencies = [StarDep(name='buf202')]
buf203.met_dependencies = []
buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf208'), can_inplace=False, is_weak=False)]
buf203.node.kernel = None


buf208: ExternKernelSchedulerNode(ExternKernelOut)
buf208.writes = [StarDep(name='buf208')]
buf208.unmet_dependencies = [StarDep(name='buf203')]
buf208.met_dependencies = [StarDep(name='arg111_1')]
buf208.users = [NodeUser(node=SchedulerNode(name='buf209'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf210'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf211'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf212'), can_inplace=True, is_weak=False)]
buf208.node.kernel = extern_kernels.mm


buf209_buf210_buf212: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf209_buf210_buf212.writes = 
    [   MemoryDep('buf209', c0, {c0: 4096}),
        MemoryDep('buf210', c0, {c0: 4096}),
        MemoryDep('buf212', c0, {c0: 2097152})]
buf209_buf210_buf212.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 2097152}), MemoryDep('buf208', c0, {c0: 2097152})]
buf209_buf210_buf212.met_dependencies = 
    [   MemoryDep('arg112_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg113_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg114_1', c1, {c0: 4096, c1: 512})]
buf209_buf210_buf212.users = []
    buf209_buf210_buf212.snodes[0] =
    buf209: SchedulerNode(ComputedBuffer)
    buf209.writes = [MemoryDep('buf209', c0, {c0: 4096})]
    buf209.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 2097152}), MemoryDep('buf208', c0, {c0: 2097152})]
    buf209.met_dependencies = [MemoryDep('arg112_1', c1, {c0: 4096, c1: 512})]
    buf209.users = [NodeUser(node=SchedulerNode(name='buf212'), can_inplace=False, is_weak=False)]
    buf209.group.device = cuda:0
    buf209.group.iteration = (4096, 512)
    buf209.sizes = ([4096], [512])
    class buf209_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf208', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg112_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf197', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf209', get_index_3, getitem)
            return store_reduction
    buf209_buf210_buf212.snodes[1] =
    buf210: SchedulerNode(ComputedBuffer)
    buf210.writes = [MemoryDep('buf210', c0, {c0: 4096})]
    buf210.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 2097152}), MemoryDep('buf208', c0, {c0: 2097152})]
    buf210.met_dependencies = [MemoryDep('arg112_1', c1, {c0: 4096, c1: 512})]
    buf210.users = [NodeUser(node=SchedulerNode(name='buf212'), can_inplace=False, is_weak=False)]
    buf210.group.device = cuda:0
    buf210.group.iteration = (4096, 512)
    buf210.sizes = ([4096], [512])
    class buf210_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf208', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg112_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf197', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf210', get_index_3, getitem_1)
            return store_reduction
    buf209_buf210_buf212.snodes[2] =
    buf212: SchedulerNode(ComputedBuffer)
    buf212.writes = [MemoryDep('buf212', c0, {c0: 2097152})]
    buf212.unmet_dependencies = 
        [   MemoryDep('buf197', c0, {c0: 2097152}),
            MemoryDep('buf208', c0, {c0: 2097152}),
            MemoryDep('buf209', c0, {c0: 4096}),
            MemoryDep('buf210', c0, {c0: 4096})]
    buf212.met_dependencies = 
        [   MemoryDep('arg112_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg113_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg114_1', c1, {c0: 4096, c1: 512})]
    buf212.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf213'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf216'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf217'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf218'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf219'), can_inplace=True, is_weak=False)]
    buf212.group.device = cuda:0
    buf212.group.iteration = (2097152, 1)
    buf212.sizes = ([4096, 512], [])
    class buf212_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf208', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg112_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf197', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf209', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf210', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg113_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg114_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf212', get_index_7, to_dtype_3, None)
            return store


buf213: ExternKernelSchedulerNode(ExternKernelOut)
buf213.writes = [StarDep(name='buf213')]
buf213.unmet_dependencies = [StarDep(name='buf212')]
buf213.met_dependencies = [StarDep(name='arg115_1')]
buf213.users = [NodeUser(node=SchedulerNode(name='buf214'), can_inplace=True, is_weak=False)]
buf213.node.kernel = extern_kernels.mm


buf214: SchedulerNode(ComputedBuffer)
buf214.writes = [MemoryDep('buf214', c0, {c0: 8388608})]
buf214.unmet_dependencies = [MemoryDep('buf213', c0, {c0: 8388608})]
buf214.met_dependencies = [MemoryDep('arg116_1', c1, {c0: 4096, c1: 2048})]
buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf215'), can_inplace=False, is_weak=False)]
buf214.group.device = cuda:0
buf214.group.iteration = (8388608, 1)
buf214.sizes = ([4096, 2048], [])
class buf214_loop_body:
    var_ranges = {z0: 4096, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg116_1', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf213', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg116_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf214', get_index_4, to_dtype_2, None)
        return store


buf215: ExternKernelSchedulerNode(ExternKernelOut)
buf215.writes = [StarDep(name='buf215')]
buf215.unmet_dependencies = [StarDep(name='buf214')]
buf215.met_dependencies = [StarDep(name='arg117_1')]
buf215.users = [NodeUser(node=SchedulerNode(name='buf216'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf217'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf218'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf219'), can_inplace=True, is_weak=False)]
buf215.node.kernel = extern_kernels.mm


buf216_buf217_buf219: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf216_buf217_buf219.writes = 
    [   MemoryDep('buf216', c0, {c0: 4096}),
        MemoryDep('buf217', c0, {c0: 4096}),
        MemoryDep('buf219', c0, {c0: 2097152})]
buf216_buf217_buf219.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 2097152}), MemoryDep('buf215', c0, {c0: 2097152})]
buf216_buf217_buf219.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg119_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg120_1', c1, {c0: 4096, c1: 512})]
buf216_buf217_buf219.users = []
    buf216_buf217_buf219.snodes[0] =
    buf216: SchedulerNode(ComputedBuffer)
    buf216.writes = [MemoryDep('buf216', c0, {c0: 4096})]
    buf216.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 2097152}), MemoryDep('buf215', c0, {c0: 2097152})]
    buf216.met_dependencies = [MemoryDep('arg118_1', c1, {c0: 4096, c1: 512})]
    buf216.users = [NodeUser(node=SchedulerNode(name='buf219'), can_inplace=False, is_weak=False)]
    buf216.group.device = cuda:0
    buf216.group.iteration = (4096, 512)
    buf216.sizes = ([4096], [512])
    class buf216_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf215', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg118_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf212', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf216', get_index_3, getitem)
            return store_reduction
    buf216_buf217_buf219.snodes[1] =
    buf217: SchedulerNode(ComputedBuffer)
    buf217.writes = [MemoryDep('buf217', c0, {c0: 4096})]
    buf217.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 2097152}), MemoryDep('buf215', c0, {c0: 2097152})]
    buf217.met_dependencies = [MemoryDep('arg118_1', c1, {c0: 4096, c1: 512})]
    buf217.users = [NodeUser(node=SchedulerNode(name='buf219'), can_inplace=False, is_weak=False)]
    buf217.group.device = cuda:0
    buf217.group.iteration = (4096, 512)
    buf217.sizes = ([4096], [512])
    class buf217_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf215', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg118_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf212', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf217', get_index_3, getitem_1)
            return store_reduction
    buf216_buf217_buf219.snodes[2] =
    buf219: SchedulerNode(ComputedBuffer)
    buf219.writes = [MemoryDep('buf219', c0, {c0: 2097152})]
    buf219.unmet_dependencies = 
        [   MemoryDep('buf212', c0, {c0: 2097152}),
            MemoryDep('buf215', c0, {c0: 2097152}),
            MemoryDep('buf216', c0, {c0: 4096}),
            MemoryDep('buf217', c0, {c0: 4096})]
    buf219.met_dependencies = 
        [   MemoryDep('arg118_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg119_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg120_1', c1, {c0: 4096, c1: 512})]
    buf219.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf220'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf231'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf232'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf233'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf234'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf219.group.device = cuda:0
    buf219.group.iteration = (2097152, 1)
    buf219.sizes = ([4096, 512], [])
    class buf219_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf215', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg118_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf212', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf216', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf217', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg119_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg120_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf219', get_index_7, to_dtype_3, None)
            return store


buf220: ExternKernelSchedulerNode(ExternKernelOut)
buf220.writes = [StarDep(name='buf220')]
buf220.unmet_dependencies = [StarDep(name='buf219')]
buf220.met_dependencies = [StarDep(name='arg121_1')]
buf220.users = [NodeUser(node=SchedulerNode(name='buf221'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf222'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf223'), can_inplace=False, is_weak=False)]
buf220.node.kernel = extern_kernels.mm


buf221: SchedulerNode(ComputedBuffer)
buf221.writes = [MemoryDep('buf221', c0, {c0: 2097152})]
buf221.unmet_dependencies = [MemoryDep('buf220', 1536*c0 + c1, {c0: 4096, c1: 512})]
buf221.met_dependencies = [MemoryDep('arg122_1', c1, {c0: 4096, c1: 512})]
buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf224'), can_inplace=False, is_weak=False)]
buf221.group.device = cuda:0
buf221.group.iteration = (2097152, 1)
buf221.sizes = ([4096, 512], [])
class buf221_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf221', get_index_2, add, None)
        return store


buf222: SchedulerNode(ComputedBuffer)
buf222.writes = [MemoryDep('buf222', c0, {c0: 2097152})]
buf222.unmet_dependencies = [MemoryDep('buf220', 1536*c0 + c1 + 512, {c0: 4096, c1: 512})]
buf222.met_dependencies = [MemoryDep('arg122_1', c1 + 512, {c0: 4096, c1: 512})]
buf222.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf224'), can_inplace=False, is_weak=False)]
buf222.group.device = cuda:0
buf222.group.iteration = (2097152, 1)
buf222.sizes = ([4096, 512], [])
class buf222_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 512
    index1 = z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf222', get_index_2, add, None)
        return store


buf223: SchedulerNode(ComputedBuffer)
buf223.writes = [MemoryDep('buf223', c0, {c0: 2097152})]
buf223.unmet_dependencies = [MemoryDep('buf220', 1536*c0 + c1 + 1024, {c0: 4096, c1: 512})]
buf223.met_dependencies = [MemoryDep('arg122_1', c1 + 1024, {c0: 4096, c1: 512})]
buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf224'), can_inplace=False, is_weak=False)]
buf223.group.device = cuda:0
buf223.group.iteration = (2097152, 1)
buf223.sizes = ([4096, 512], [])
class buf223_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 1024
    index1 = z1 + 1024
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf223', get_index_2, add, None)
        return store


buf224: ExternKernelSchedulerNode(FallbackKernel)
buf224.writes = [StarDep(name='buf224')]
buf224.unmet_dependencies = [StarDep(name='buf221'), StarDep(name='buf222'), StarDep(name='buf223')]
buf224.met_dependencies = []
buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf225'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf226'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf227'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf228'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf229'), can_inplace=False, is_weak=False)]
buf224.node.kernel = None


buf225: ExternKernelSchedulerNode(MultiOutput)
buf225.writes = [StarDep(name='buf225')]
buf225.unmet_dependencies = [StarDep(name='buf224')]
buf225.met_dependencies = []
buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf230'), can_inplace=False, is_weak=False)]
buf225.node.kernel = None


buf230: ExternKernelSchedulerNode(ExternKernelOut)
buf230.writes = [StarDep(name='buf230')]
buf230.unmet_dependencies = [StarDep(name='buf225')]
buf230.met_dependencies = [StarDep(name='arg123_1')]
buf230.users = [NodeUser(node=SchedulerNode(name='buf231'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf232'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf233'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf234'), can_inplace=True, is_weak=False)]
buf230.node.kernel = extern_kernels.mm


buf231_buf232_buf234: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf231_buf232_buf234.writes = 
    [   MemoryDep('buf231', c0, {c0: 4096}),
        MemoryDep('buf232', c0, {c0: 4096}),
        MemoryDep('buf234', c0, {c0: 2097152})]
buf231_buf232_buf234.unmet_dependencies = [MemoryDep('buf219', c0, {c0: 2097152}), MemoryDep('buf230', c0, {c0: 2097152})]
buf231_buf232_buf234.met_dependencies = 
    [   MemoryDep('arg124_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg125_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg126_1', c1, {c0: 4096, c1: 512})]
buf231_buf232_buf234.users = []
    buf231_buf232_buf234.snodes[0] =
    buf231: SchedulerNode(ComputedBuffer)
    buf231.writes = [MemoryDep('buf231', c0, {c0: 4096})]
    buf231.unmet_dependencies = [MemoryDep('buf219', c0, {c0: 2097152}), MemoryDep('buf230', c0, {c0: 2097152})]
    buf231.met_dependencies = [MemoryDep('arg124_1', c1, {c0: 4096, c1: 512})]
    buf231.users = [NodeUser(node=SchedulerNode(name='buf234'), can_inplace=False, is_weak=False)]
    buf231.group.device = cuda:0
    buf231.group.iteration = (4096, 512)
    buf231.sizes = ([4096], [512])
    class buf231_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf230', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg124_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf219', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf231', get_index_3, getitem)
            return store_reduction
    buf231_buf232_buf234.snodes[1] =
    buf232: SchedulerNode(ComputedBuffer)
    buf232.writes = [MemoryDep('buf232', c0, {c0: 4096})]
    buf232.unmet_dependencies = [MemoryDep('buf219', c0, {c0: 2097152}), MemoryDep('buf230', c0, {c0: 2097152})]
    buf232.met_dependencies = [MemoryDep('arg124_1', c1, {c0: 4096, c1: 512})]
    buf232.users = [NodeUser(node=SchedulerNode(name='buf234'), can_inplace=False, is_weak=False)]
    buf232.group.device = cuda:0
    buf232.group.iteration = (4096, 512)
    buf232.sizes = ([4096], [512])
    class buf232_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf230', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg124_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf219', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf232', get_index_3, getitem_1)
            return store_reduction
    buf231_buf232_buf234.snodes[2] =
    buf234: SchedulerNode(ComputedBuffer)
    buf234.writes = [MemoryDep('buf234', c0, {c0: 2097152})]
    buf234.unmet_dependencies = 
        [   MemoryDep('buf219', c0, {c0: 2097152}),
            MemoryDep('buf230', c0, {c0: 2097152}),
            MemoryDep('buf231', c0, {c0: 4096}),
            MemoryDep('buf232', c0, {c0: 4096})]
    buf234.met_dependencies = 
        [   MemoryDep('arg124_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg125_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg126_1', c1, {c0: 4096, c1: 512})]
    buf234.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf235'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf238'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf239'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf240'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf241'), can_inplace=True, is_weak=False)]
    buf234.group.device = cuda:0
    buf234.group.iteration = (2097152, 1)
    buf234.sizes = ([4096, 512], [])
    class buf234_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf230', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg124_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf219', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf231', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf232', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg125_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg126_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf234', get_index_7, to_dtype_3, None)
            return store


buf235: ExternKernelSchedulerNode(ExternKernelOut)
buf235.writes = [StarDep(name='buf235')]
buf235.unmet_dependencies = [StarDep(name='buf234')]
buf235.met_dependencies = [StarDep(name='arg127_1')]
buf235.users = [NodeUser(node=SchedulerNode(name='buf236'), can_inplace=True, is_weak=False)]
buf235.node.kernel = extern_kernels.mm


buf236: SchedulerNode(ComputedBuffer)
buf236.writes = [MemoryDep('buf236', c0, {c0: 8388608})]
buf236.unmet_dependencies = [MemoryDep('buf235', c0, {c0: 8388608})]
buf236.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 4096, c1: 2048})]
buf236.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf237'), can_inplace=False, is_weak=False)]
buf236.group.device = cuda:0
buf236.group.iteration = (8388608, 1)
buf236.sizes = ([4096, 2048], [])
class buf236_loop_body:
    var_ranges = {z0: 4096, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg128_1', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf235', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg128_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf236', get_index_4, to_dtype_2, None)
        return store


buf237: ExternKernelSchedulerNode(ExternKernelOut)
buf237.writes = [StarDep(name='buf237')]
buf237.unmet_dependencies = [StarDep(name='buf236')]
buf237.met_dependencies = [StarDep(name='arg129_1')]
buf237.users = [NodeUser(node=SchedulerNode(name='buf238'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf239'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf240'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf241'), can_inplace=True, is_weak=False)]
buf237.node.kernel = extern_kernels.mm


buf238_buf239_buf241: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf238_buf239_buf241.writes = 
    [   MemoryDep('buf238', c0, {c0: 4096}),
        MemoryDep('buf239', c0, {c0: 4096}),
        MemoryDep('buf241', c0, {c0: 2097152})]
buf238_buf239_buf241.unmet_dependencies = [MemoryDep('buf234', c0, {c0: 2097152}), MemoryDep('buf237', c0, {c0: 2097152})]
buf238_buf239_buf241.met_dependencies = 
    [   MemoryDep('arg130_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg131_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg132_1', c1, {c0: 4096, c1: 512})]
buf238_buf239_buf241.users = []
    buf238_buf239_buf241.snodes[0] =
    buf238: SchedulerNode(ComputedBuffer)
    buf238.writes = [MemoryDep('buf238', c0, {c0: 4096})]
    buf238.unmet_dependencies = [MemoryDep('buf234', c0, {c0: 2097152}), MemoryDep('buf237', c0, {c0: 2097152})]
    buf238.met_dependencies = [MemoryDep('arg130_1', c1, {c0: 4096, c1: 512})]
    buf238.users = [NodeUser(node=SchedulerNode(name='buf241'), can_inplace=False, is_weak=False)]
    buf238.group.device = cuda:0
    buf238.group.iteration = (4096, 512)
    buf238.sizes = ([4096], [512])
    class buf238_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf237', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg130_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf234', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf238', get_index_3, getitem)
            return store_reduction
    buf238_buf239_buf241.snodes[1] =
    buf239: SchedulerNode(ComputedBuffer)
    buf239.writes = [MemoryDep('buf239', c0, {c0: 4096})]
    buf239.unmet_dependencies = [MemoryDep('buf234', c0, {c0: 2097152}), MemoryDep('buf237', c0, {c0: 2097152})]
    buf239.met_dependencies = [MemoryDep('arg130_1', c1, {c0: 4096, c1: 512})]
    buf239.users = [NodeUser(node=SchedulerNode(name='buf241'), can_inplace=False, is_weak=False)]
    buf239.group.device = cuda:0
    buf239.group.iteration = (4096, 512)
    buf239.sizes = ([4096], [512])
    class buf239_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf237', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg130_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf234', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf239', get_index_3, getitem_1)
            return store_reduction
    buf238_buf239_buf241.snodes[2] =
    buf241: SchedulerNode(ComputedBuffer)
    buf241.writes = [MemoryDep('buf241', c0, {c0: 2097152})]
    buf241.unmet_dependencies = 
        [   MemoryDep('buf234', c0, {c0: 2097152}),
            MemoryDep('buf237', c0, {c0: 2097152}),
            MemoryDep('buf238', c0, {c0: 4096}),
            MemoryDep('buf239', c0, {c0: 4096})]
    buf241.met_dependencies = 
        [   MemoryDep('arg130_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg131_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg132_1', c1, {c0: 4096, c1: 512})]
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf242'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf253'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf254'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf255'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf256'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf241.group.device = cuda:0
    buf241.group.iteration = (2097152, 1)
    buf241.sizes = ([4096, 512], [])
    class buf241_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf237', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg130_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf234', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf238', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf239', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg131_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg132_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf241', get_index_7, to_dtype_3, None)
            return store


buf242: ExternKernelSchedulerNode(ExternKernelOut)
buf242.writes = [StarDep(name='buf242')]
buf242.unmet_dependencies = [StarDep(name='buf241')]
buf242.met_dependencies = [StarDep(name='arg133_1')]
buf242.users = [NodeUser(node=SchedulerNode(name='buf243'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf244'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf245'), can_inplace=False, is_weak=False)]
buf242.node.kernel = extern_kernels.mm


buf243: SchedulerNode(ComputedBuffer)
buf243.writes = [MemoryDep('buf243', c0, {c0: 2097152})]
buf243.unmet_dependencies = [MemoryDep('buf242', 1536*c0 + c1, {c0: 4096, c1: 512})]
buf243.met_dependencies = [MemoryDep('arg134_1', c1, {c0: 4096, c1: 512})]
buf243.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf246'), can_inplace=False, is_weak=False)]
buf243.group.device = cuda:0
buf243.group.iteration = (2097152, 1)
buf243.sizes = ([4096, 512], [])
class buf243_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg134_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf243', get_index_2, add, None)
        return store


buf244: SchedulerNode(ComputedBuffer)
buf244.writes = [MemoryDep('buf244', c0, {c0: 2097152})]
buf244.unmet_dependencies = [MemoryDep('buf242', 1536*c0 + c1 + 512, {c0: 4096, c1: 512})]
buf244.met_dependencies = [MemoryDep('arg134_1', c1 + 512, {c0: 4096, c1: 512})]
buf244.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf246'), can_inplace=False, is_weak=False)]
buf244.group.device = cuda:0
buf244.group.iteration = (2097152, 1)
buf244.sizes = ([4096, 512], [])
class buf244_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 512
    index1 = z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg134_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf244', get_index_2, add, None)
        return store


buf245: SchedulerNode(ComputedBuffer)
buf245.writes = [MemoryDep('buf245', c0, {c0: 2097152})]
buf245.unmet_dependencies = [MemoryDep('buf242', 1536*c0 + c1 + 1024, {c0: 4096, c1: 512})]
buf245.met_dependencies = [MemoryDep('arg134_1', c1 + 1024, {c0: 4096, c1: 512})]
buf245.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf246'), can_inplace=False, is_weak=False)]
buf245.group.device = cuda:0
buf245.group.iteration = (2097152, 1)
buf245.sizes = ([4096, 512], [])
class buf245_loop_body:
    var_ranges = {z0: 4096, z1: 512}
    index0 = 1536*z0 + z1 + 1024
    index1 = z1 + 1024
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg134_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf245', get_index_2, add, None)
        return store


buf246: ExternKernelSchedulerNode(FallbackKernel)
buf246.writes = [StarDep(name='buf246')]
buf246.unmet_dependencies = [StarDep(name='buf243'), StarDep(name='buf244'), StarDep(name='buf245')]
buf246.met_dependencies = []
buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf247'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf248'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf249'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf250'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf251'), can_inplace=False, is_weak=False)]
buf246.node.kernel = None


buf247: ExternKernelSchedulerNode(MultiOutput)
buf247.writes = [StarDep(name='buf247')]
buf247.unmet_dependencies = [StarDep(name='buf246')]
buf247.met_dependencies = []
buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf252'), can_inplace=False, is_weak=False)]
buf247.node.kernel = None


buf252: ExternKernelSchedulerNode(ExternKernelOut)
buf252.writes = [StarDep(name='buf252')]
buf252.unmet_dependencies = [StarDep(name='buf247')]
buf252.met_dependencies = [StarDep(name='arg135_1')]
buf252.users = [NodeUser(node=SchedulerNode(name='buf253'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf254'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf255'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf256'), can_inplace=True, is_weak=False)]
buf252.node.kernel = extern_kernels.mm


buf253_buf254_buf256: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf253_buf254_buf256.writes = 
    [   MemoryDep('buf253', c0, {c0: 4096}),
        MemoryDep('buf254', c0, {c0: 4096}),
        MemoryDep('buf256', c0, {c0: 2097152})]
buf253_buf254_buf256.unmet_dependencies = [MemoryDep('buf241', c0, {c0: 2097152}), MemoryDep('buf252', c0, {c0: 2097152})]
buf253_buf254_buf256.met_dependencies = 
    [   MemoryDep('arg136_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg137_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg138_1', c1, {c0: 4096, c1: 512})]
buf253_buf254_buf256.users = []
    buf253_buf254_buf256.snodes[0] =
    buf253: SchedulerNode(ComputedBuffer)
    buf253.writes = [MemoryDep('buf253', c0, {c0: 4096})]
    buf253.unmet_dependencies = [MemoryDep('buf241', c0, {c0: 2097152}), MemoryDep('buf252', c0, {c0: 2097152})]
    buf253.met_dependencies = [MemoryDep('arg136_1', c1, {c0: 4096, c1: 512})]
    buf253.users = [NodeUser(node=SchedulerNode(name='buf256'), can_inplace=False, is_weak=False)]
    buf253.group.device = cuda:0
    buf253.group.iteration = (4096, 512)
    buf253.sizes = ([4096], [512])
    class buf253_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf252', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg136_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf241', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf253', get_index_3, getitem)
            return store_reduction
    buf253_buf254_buf256.snodes[1] =
    buf254: SchedulerNode(ComputedBuffer)
    buf254.writes = [MemoryDep('buf254', c0, {c0: 4096})]
    buf254.unmet_dependencies = [MemoryDep('buf241', c0, {c0: 2097152}), MemoryDep('buf252', c0, {c0: 2097152})]
    buf254.met_dependencies = [MemoryDep('arg136_1', c1, {c0: 4096, c1: 512})]
    buf254.users = [NodeUser(node=SchedulerNode(name='buf256'), can_inplace=False, is_weak=False)]
    buf254.group.device = cuda:0
    buf254.group.iteration = (4096, 512)
    buf254.sizes = ([4096], [512])
    class buf254_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf252', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg136_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf241', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf254', get_index_3, getitem_1)
            return store_reduction
    buf253_buf254_buf256.snodes[2] =
    buf256: SchedulerNode(ComputedBuffer)
    buf256.writes = [MemoryDep('buf256', c0, {c0: 2097152})]
    buf256.unmet_dependencies = 
        [   MemoryDep('buf241', c0, {c0: 2097152}),
            MemoryDep('buf252', c0, {c0: 2097152}),
            MemoryDep('buf253', c0, {c0: 4096}),
            MemoryDep('buf254', c0, {c0: 4096})]
    buf256.met_dependencies = 
        [   MemoryDep('arg136_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg137_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg138_1', c1, {c0: 4096, c1: 512})]
    buf256.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf257'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf260'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf261'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf262'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf263'), can_inplace=True, is_weak=False)]
    buf256.group.device = cuda:0
    buf256.group.iteration = (2097152, 1)
    buf256.sizes = ([4096, 512], [])
    class buf256_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf252', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg136_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf241', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf253', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf254', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg137_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg138_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf256', get_index_7, to_dtype_3, None)
            return store


buf257: ExternKernelSchedulerNode(ExternKernelOut)
buf257.writes = [StarDep(name='buf257')]
buf257.unmet_dependencies = [StarDep(name='buf256')]
buf257.met_dependencies = [StarDep(name='arg139_1')]
buf257.users = [NodeUser(node=SchedulerNode(name='buf258'), can_inplace=True, is_weak=False)]
buf257.node.kernel = extern_kernels.mm


buf258: SchedulerNode(ComputedBuffer)
buf258.writes = [MemoryDep('buf258', c0, {c0: 8388608})]
buf258.unmet_dependencies = [MemoryDep('buf257', c0, {c0: 8388608})]
buf258.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 4096, c1: 2048})]
buf258.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf259'), can_inplace=False, is_weak=False)]
buf258.group.device = cuda:0
buf258.group.iteration = (8388608, 1)
buf258.sizes = ([4096, 2048], [])
class buf258_loop_body:
    var_ranges = {z0: 4096, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg140_1', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf257', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg140_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_2 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf258', get_index_4, to_dtype_2, None)
        return store


buf259: ExternKernelSchedulerNode(ExternKernelOut)
buf259.writes = [StarDep(name='buf259')]
buf259.unmet_dependencies = [StarDep(name='buf258')]
buf259.met_dependencies = [StarDep(name='arg141_1')]
buf259.users = [NodeUser(node=SchedulerNode(name='buf260'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf261'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf262'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf263'), can_inplace=True, is_weak=False)]
buf259.node.kernel = extern_kernels.mm


buf260_buf261_buf263: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
buf260_buf261_buf263.writes = 
    [   MemoryDep('buf260', c0, {c0: 4096}),
        MemoryDep('buf261', c0, {c0: 4096}),
        MemoryDep('buf263', c0, {c0: 2097152})]
buf260_buf261_buf263.unmet_dependencies = [MemoryDep('buf256', c0, {c0: 2097152}), MemoryDep('buf259', c0, {c0: 2097152})]
buf260_buf261_buf263.met_dependencies = 
    [   MemoryDep('arg142_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg143_1', c1, {c0: 4096, c1: 512}),
        MemoryDep('arg144_1', c1, {c0: 4096, c1: 512})]
buf260_buf261_buf263.users = []
    buf260_buf261_buf263.snodes[0] =
    buf260: SchedulerNode(ComputedBuffer)
    buf260.writes = [MemoryDep('buf260', c0, {c0: 4096})]
    buf260.unmet_dependencies = [MemoryDep('buf256', c0, {c0: 2097152}), MemoryDep('buf259', c0, {c0: 2097152})]
    buf260.met_dependencies = [MemoryDep('arg142_1', c1, {c0: 4096, c1: 512})]
    buf260.users = [NodeUser(node=SchedulerNode(name='buf263'), can_inplace=False, is_weak=False)]
    buf260.group.device = cuda:0
    buf260.group.iteration = (4096, 512)
    buf260.sizes = ([4096], [512])
    class buf260_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf259', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg142_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf256', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf260', get_index_3, getitem)
            return store_reduction
    buf260_buf261_buf263.snodes[1] =
    buf261: SchedulerNode(ComputedBuffer)
    buf261.writes = [MemoryDep('buf261', c0, {c0: 4096})]
    buf261.unmet_dependencies = [MemoryDep('buf256', c0, {c0: 2097152}), MemoryDep('buf259', c0, {c0: 2097152})]
    buf261.met_dependencies = [MemoryDep('arg142_1', c1, {c0: 4096, c1: 512})]
    buf261.users = [NodeUser(node=SchedulerNode(name='buf263'), can_inplace=False, is_weak=False)]
    buf261.group.device = cuda:0
    buf261.group.iteration = (4096, 512)
    buf261.sizes = ([4096], [512])
    class buf261_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf259', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg142_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf256', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', to_dtype)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_3 = self.get_index('index2')
            store_reduction = ops.store_reduction('buf261', get_index_3, getitem_1)
            return store_reduction
    buf260_buf261_buf263.snodes[2] =
    buf263: SchedulerNode(ComputedBuffer)
    buf263.writes = [MemoryDep('buf263', c0, {c0: 2097152})]
    buf263.unmet_dependencies = 
        [   MemoryDep('buf256', c0, {c0: 2097152}),
            MemoryDep('buf259', c0, {c0: 2097152}),
            MemoryDep('buf260', c0, {c0: 4096}),
            MemoryDep('buf261', c0, {c0: 4096})]
    buf263.met_dependencies = 
        [   MemoryDep('arg142_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg143_1', c1, {c0: 4096, c1: 512}),
            MemoryDep('arg144_1', c1, {c0: 4096, c1: 512})]
    buf263.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf263.group.device = cuda:0
    buf263.group.iteration = (2097152, 1)
    buf263.sizes = ([4096, 512], [])
    class buf263_loop_body:
        var_ranges = {z0: 4096, z1: 512}
        index0 = 512*z0 + z1
        index1 = z1
        index2 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf259', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('arg142_1', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf256', get_index_2)
            add_1 = ops.add(add, load_2)
            to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
            get_index_3 = self.get_index('index2')
            load_3 = ops.load('buf260', get_index_3)
            sub = ops.sub(to_dtype, load_3)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf261', get_index_4)
            constant = ops.constant(512.0, torch.float32)
            truediv = ops.truediv(load_4, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add_2 = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add_2)
            mul = ops.mul(sub, rsqrt)
            get_index_5 = self.get_index('index1')
            load_5 = ops.load('arg143_1', get_index_5)
            to_dtype_1 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
            mul_1 = ops.mul(mul, to_dtype_1)
            get_index_6 = self.get_index('index1')
            load_6 = ops.load('arg144_1', get_index_6)
            to_dtype_2 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
            add_3 = ops.add(mul_1, to_dtype_2)
            to_dtype_3 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
            get_index_7 = self.get_index('index0')
            store = ops.store('buf263', get_index_7, to_dtype_3, None)
            return store


